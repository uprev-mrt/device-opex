/**
  * @file stm8_expander_slave.h
  * @author generated by mrt-device utility 
  * @link [https://github.com/uprev-mrt/mrtutils/wiki/mrt-device]
  * @brief Device driver for stm8_expander device
  *
  *
  */

#ifdef __cplusplus
extern "C"
{
#endif

#include <stdint.h>
#include "stm8_expander_regs.h"
/*user-block-top-start*/
/*user-block-top-end*/

#define SLAVE_REG_PERM_R    0x01
#define SLAVE_REG_PERM_W    0x02
#define SLAVE_REG_PERM_X    0x04
#define SLAVE_REG_PERM_RW   0x03

#define SLAVE_REG_ACESS_R    0x80
#define SLAVE_REG_ACESS_W    0x40

#define SLAVE_STATE_ADDRESS  0x00
#define SLAVE_STATE_DATA     0x01

/*******************************************************************************
  Struct                                                                                
*******************************************************************************/

typedef uint8_t addr_t;



#pragma pack(push)
#pragma pack(1)

typedef struct{
    uint8_t mFlags;
    uint8_t mSize;
    addr_t mAddr;
} slave_reg_t;




typedef struct{
    struct
    {
        uint16_t mGpioIn;                             //Input values for gpio 0-15
        uint16_t mGpioOut;                            //Output values for gpio 0-15
        uint16_t mAdc0Val;                            //Output of ADC 0
        uint16_t mAdc1Val;                            //Output of ADC 1
        uint16_t mAdc2Val;                            //Output of ADC 2
        uint16_t mAdc3Val;                            //Output of ADC 3
        uint16_t mAdc4Val;                            //Output of ADC 4
        uint16_t mIrqSrc;                             //latching Interrupt source mask
        uint8_t mGpio0Cfg;                            //Configuration for GPIO 0
        uint8_t mGpio1Cfg;                            //Configuration for GPIO 1
        uint8_t mGpio2Cfg;                            //Configuration for GPIO 2
        uint8_t mGpio3Cfg;                            //Configuration for GPIO 3
        uint8_t mGpio4Cfg;                            //Configuration for GPIO 4
        uint8_t mGpio5Cfg;                            //Configuration for GPIO 5
        uint8_t mGpio6Cfg;                            //Configuration for GPIO 6
        uint8_t mGpio7Cfg;                            //Configuration for GPIO 7
        uint8_t mGpio8Cfg;                            //Configuration for GPIO 8
        uint8_t mGpio9Cfg;                            //Configuration for GPIO 9
        uint8_t mGpio10Cfg;                           //Configuration for GPIO 10
        uint8_t mGpio11Cfg;                           //Configuration for GPIO 11
        uint16_t mAdc0Cfg;                            //Configuration for ADC 0
        uint16_t mAdc1Cfg;                            //Configuration for ADC 1
        uint16_t mAdc2Cfg;                            //Configuration for ADC 2
        uint16_t mAdc3Cfg;                            //Configuration for ADC 3
        uint16_t mAdc4Cfg;                            //Configuration for ADC 4
        uint32_t mPwmConfig;                          //Configuration for PWM
        uint8_t mWhoAmI;                              //Device ID
        uint8_t mEepromMem;                           //Start address of EEPROM memory on stm8. User can read/write up to 128 bytes starting at this address
    } mData;    
    slave_reg_t mRegs[STM8_EXPANDER_REG_COUNT];
    slave_reg_t* mCurrentReg;
    uint8_t mCursor;        //Register cursor
    uint8_t mAddrBytes;     //Number of address bytes received so far
    addr_t mAddress;        //Current address
    uint8_t mState;         //state of register server
    uint8_t mFlags;         //flags for handling
/*user-block-struct-start*/
/*user-block-struct-end*/
}stm8_expander_slave_t;

#pragma pack(pop)

/**
 * @brief initializes stm8_expander slave registers
 * @param fifoDepth size of rxFifo to use
 */
void io_slave_init();

/**
 * @brief initializes stm8_expander slave registers
 * @param dev ptr to stm8_expander device
 */
void io_slave_process();

/**
 * @brief feed byte into device
 * @param data byte to feed 
 */
void io_slave_put( uint8_t data );

/**
 * @brief gets next byte
 * @param data byte to feed 
 */
uint8_t io_slave_get(void);

/**
 * @brief ends transaction and resets state
 * 
 */
void io_slave_end_transaction(void);




/*user-block-bottom-start*/
/*user-block-bottom-end*/

#ifdef __cplusplus
}
#endif