/**
  * @file stm8_expander_regs.h
  * @author generated by mrt-device utility 
  * @link [https://github.com/uprev-mrt/mrtutils/wiki/mrt-device]
  * @brief values and constants for the stm8_expander device registers
  * 
  */

#define STM8_EXPANDER_I2C_ADDRESS 0x42
#define STM8_EXPANDER_REG_ADDR_SIZE 1
#define STM8_EXPANDER_REG_COUNT 28


/*******************************************************************************
  Register Addresses                                                                              
*******************************************************************************/

#define IO_REG_GPIO_IN_ADDR                                        0x00 /* Input values for gpio 0-15 */
#define IO_REG_GPIO_OUT_ADDR                                       0x02 /* Output values for gpio 0-15 */
#define IO_REG_ADC_0_VAL_ADDR                                      0x06 /* Output of ADC 0 */
#define IO_REG_ADC_1_VAL_ADDR                                      0x08 /* Output of ADC 1 */
#define IO_REG_ADC_2_VAL_ADDR                                      0x0A /* Output of ADC 2 */
#define IO_REG_ADC_3_VAL_ADDR                                      0x0C /* Output of ADC 3 */
#define IO_REG_ADC_4_VAL_ADDR                                      0x0E /* Output of ADC 4 */
#define IO_REG_IRQ_SRC_ADDR                                        0x10 /* latching Interrupt source mask */
#define IO_REG_GPIO_0_CFG_ADDR                                     0x20 /* Configuration for GPIO 0 */
#define IO_REG_GPIO_1_CFG_ADDR                                     0x21 /* Configuration for GPIO 1 */
#define IO_REG_GPIO_2_CFG_ADDR                                     0x22 /* Configuration for GPIO 2 */
#define IO_REG_GPIO_3_CFG_ADDR                                     0x23 /* Configuration for GPIO 3 */
#define IO_REG_GPIO_4_CFG_ADDR                                     0x24 /* Configuration for GPIO 4 */
#define IO_REG_GPIO_5_CFG_ADDR                                     0x25 /* Configuration for GPIO 5 */
#define IO_REG_GPIO_6_CFG_ADDR                                     0x26 /* Configuration for GPIO 6 */
#define IO_REG_GPIO_7_CFG_ADDR                                     0x27 /* Configuration for GPIO 7 */
#define IO_REG_GPIO_8_CFG_ADDR                                     0x28 /* Configuration for GPIO 8 */
#define IO_REG_GPIO_9_CFG_ADDR                                     0x29 /* Configuration for GPIO 9 */
#define IO_REG_GPIO_10_CFG_ADDR                                    0x2A /* Configuration for GPIO 10 */
#define IO_REG_GPIO_11_CFG_ADDR                                    0x2B /* Configuration for GPIO 11 */
#define IO_REG_ADC_0_CFG_ADDR                                      0x30 /* Configuration for ADC 0 */
#define IO_REG_ADC_1_CFG_ADDR                                      0x32 /* Configuration for ADC 1 */
#define IO_REG_ADC_2_CFG_ADDR                                      0x34 /* Configuration for ADC 2 */
#define IO_REG_ADC_3_CFG_ADDR                                      0x36 /* Configuration for ADC 3 */
#define IO_REG_ADC_4_CFG_ADDR                                      0x38 /* Configuration for ADC 4 */
#define IO_REG_PWM_CONFIG_ADDR                                     0x40 /* Configuration for PWM */
#define IO_REG_WHO_AM_I_ADDR                                       0x60 /* Device ID */
#define IO_REG_EEPROM_MEM_ADDR                                     0x7F /* Start address of EEPROM memory on stm8. User can read/write up to 128 bytes starting at this address */


/*******************************************************************************
  Fields                                                                              
*******************************************************************************/

/* GPIO_IN Register Fields */
    /* GPIO_IN -> GPIO_IN */
    #define IO_GPIO_IN_GPIO_IN_FIELD_MASK                          0xFFFF /* Input values for gpio 0-15 */
    #define IO_GPIO_IN_GPIO_IN_FIELD_OFFSET                        0x0000

/* GPIO_OUT Register Fields */
    /* GPIO_OUT -> GPIO_OUT */
    #define IO_GPIO_OUT_GPIO_OUT_FIELD_MASK                        0xFFFF /* Output values for gpio 0-15 */
    #define IO_GPIO_OUT_GPIO_OUT_FIELD_OFFSET                      0x0000

/* ADC_0_VAL Register Fields */
    /* ADC_0_VAL -> ADC_0_VAL */
    #define IO_ADC_0_VAL_ADC_0_VAL_FIELD_MASK                      0xFFFF /* Analog value on ADC0 */
    #define IO_ADC_0_VAL_ADC_0_VAL_FIELD_OFFSET                    0x0000

/* ADC_1_VAL Register Fields */
    /* ADC_1_VAL -> ADC_1_VAL */
    #define IO_ADC_1_VAL_ADC_1_VAL_FIELD_MASK                      0xFFFF /* Analog value on ADC1 */
    #define IO_ADC_1_VAL_ADC_1_VAL_FIELD_OFFSET                    0x0000

/* ADC_2_VAL Register Fields */
    /* ADC_2_VAL -> ADC_2_VAL */
    #define IO_ADC_2_VAL_ADC_2_VAL_FIELD_MASK                      0xFFFF /* Analog value on ADC2 */
    #define IO_ADC_2_VAL_ADC_2_VAL_FIELD_OFFSET                    0x0000

/* ADC_3_VAL Register Fields */
    /* ADC_3_VAL -> ADC_3_VAL */
    #define IO_ADC_3_VAL_ADC_3_VAL_FIELD_MASK                      0xFFFF /* Analog value on ADC3 */
    #define IO_ADC_3_VAL_ADC_3_VAL_FIELD_OFFSET                    0x0000

/* ADC_4_VAL Register Fields */
    /* ADC_4_VAL -> ADC_4_VAL */
    #define IO_ADC_4_VAL_ADC_4_VAL_FIELD_MASK                      0xFFFF /* Analog value on ADC4 */
    #define IO_ADC_4_VAL_ADC_4_VAL_FIELD_OFFSET                    0x0000

/* PWM_0_VAL Register Fields */
    /* PWM_0_VAL -> PWM_0_VAL */
    #define IO_PWM_0_VAL_PWM_0_VAL_FIELD_MASK                      0xFFFF /* PWM value for ch 0 */
    #define IO_PWM_0_VAL_PWM_0_VAL_FIELD_OFFSET                    0x0000

/* PWM_1_VAL Register Fields */
    /* PWM_1_VAL -> PWM_1_VAL */
    #define IO_PWM_1_VAL_PWM_1_VAL_FIELD_MASK                      0xFFFF /* PWM value for ch 1 */
    #define IO_PWM_1_VAL_PWM_1_VAL_FIELD_OFFSET                    0x0000

/* PWM_2_VAL Register Fields */
    /* PWM_2_VAL -> PWM_2_VAL */
    #define IO_PWM_2_VAL_PWM_2_VAL_FIELD_MASK                      0xFFFF /* PWM value for ch 2 */
    #define IO_PWM_2_VAL_PWM_2_VAL_FIELD_OFFSET                    0x0000

/* PWM_3_VAL Register Fields */
    /* PWM_3_VAL -> PWM_3_VAL */
    #define IO_PWM_3_VAL_PWM_3_VAL_FIELD_MASK                      0xFFFF /* PWM value for ch 3 */
    #define IO_PWM_3_VAL_PWM_3_VAL_FIELD_OFFSET                    0x0000

/* PWM_4_VAL Register Fields */
    /* PWM_4_VAL -> PWM_4_VAL */
    #define IO_PWM_4_VAL_PWM_4_VAL_FIELD_MASK                      0xFFFF /* PWM value for ch 4 */
    #define IO_PWM_4_VAL_PWM_4_VAL_FIELD_OFFSET                    0x0000

/* PWM_5_VAL Register Fields */
    /* PWM_5_VAL -> PWM_5_VAL */
    #define IO_PWM_5_VAL_PWM_5_VAL_FIELD_MASK                      0xFFFF /* PWM value for ch 5 */
    #define IO_PWM_5_VAL_PWM_5_VAL_FIELD_OFFSET                    0x0000

/* IRQ_SRC Register Fields */
    /* IRQ_SRC -> IRQ_SRC */
    #define IO_IRQ_SRC_IRQ_SRC_FIELD_MASK                          0xFFFF /* latching Interrupt source mask. indicates souce of IRQ resets on read */
    #define IO_IRQ_SRC_IRQ_SRC_FIELD_OFFSET                        0x0000

/* GPIO_0_CFG Register Fields */
    /* GPIO_0_CFG -> Flags */
    #define IO_GPIO_0_CFG_DIR                                      0x80 /* Pin Direction */
    #define IO_GPIO_0_CFG_PP                                       0x40 /* Enables Push/Pull, Otherwise pin is OpenDrain/floating */
    #define IO_GPIO_0_CFG_ALT                                      0x08 /* Indicates that GPIO is disabled because pin is being used for an alternate function (PWM, ADC, etc) */
    #define IO_GPIO_0_CFG_EN                                       0x01 /* Enables GPIO */
    /* GPIO_0_CFG -> IRQ */
    #define IO_GPIO_0_CFG_IRQ_FIELD_MASK                           0x30 /* Interrupt selection */
    #define IO_GPIO_0_CFG_IRQ_FIELD_OFFSET                         0x04
      #define IO_GPIO_0_CFG_IRQ_NONE                               0x00 /* No interrupt */
      #define IO_GPIO_0_CFG_IRQ_RISING                             0x01 /* Trigger on Rising */
      #define IO_GPIO_0_CFG_IRQ_FALLING                            0x02 /* Trigger on falling */
      #define IO_GPIO_0_CFG_IRQ_ANY                                0x03 /* Trigger on any */

/* GPIO_1_CFG Register Fields */
    /* GPIO_1_CFG -> Flags */
    #define IO_GPIO_1_CFG_DIR                                      0x80 /* Pin Direction */
    #define IO_GPIO_1_CFG_PP                                       0x40 /* Enables Push/Pull, Otherwise pin is OpenDrain/floating */
    #define IO_GPIO_1_CFG_ALT                                      0x08 /* Indicates that GPIO is disabled because pin is being used for an alternate function (PWM, ADC, etc) */
    #define IO_GPIO_1_CFG_EN                                       0x01 /* Enables GPIO */
    /* GPIO_1_CFG -> IRQ */
    #define IO_GPIO_1_CFG_IRQ_FIELD_MASK                           0x30 /* Interrupt selection */
    #define IO_GPIO_1_CFG_IRQ_FIELD_OFFSET                         0x04
      #define IO_GPIO_1_CFG_IRQ_NONE                               0x00 /* No interrupt */
      #define IO_GPIO_1_CFG_IRQ_RISING                             0x01 /* Trigger on Rising */
      #define IO_GPIO_1_CFG_IRQ_FALLING                            0x02 /* Trigger on falling */
      #define IO_GPIO_1_CFG_IRQ_ANY                                0x03 /* Trigger on any */

/* GPIO_2_CFG Register Fields */
    /* GPIO_2_CFG -> Flags */
    #define IO_GPIO_2_CFG_DIR                                      0x80 /* Pin Direction */
    #define IO_GPIO_2_CFG_PP                                       0x40 /* Enables Push/Pull, Otherwise pin is OpenDrain/floating */
    #define IO_GPIO_2_CFG_ALT                                      0x08 /* Indicates that GPIO is disabled because pin is being used for an alternate function (PWM, ADC, etc) */
    #define IO_GPIO_2_CFG_EN                                       0x01 /* Enables GPIO */
    /* GPIO_2_CFG -> IRQ */
    #define IO_GPIO_2_CFG_IRQ_FIELD_MASK                           0x30 /* Interrupt selection */
    #define IO_GPIO_2_CFG_IRQ_FIELD_OFFSET                         0x04
      #define IO_GPIO_2_CFG_IRQ_NONE                               0x00 /* No interrupt */
      #define IO_GPIO_2_CFG_IRQ_RISING                             0x01 /* Trigger on Rising */
      #define IO_GPIO_2_CFG_IRQ_FALLING                            0x02 /* Trigger on falling */
      #define IO_GPIO_2_CFG_IRQ_ANY                                0x03 /* Trigger on any */

/* GPIO_3_CFG Register Fields */
    /* GPIO_3_CFG -> Flags */
    #define IO_GPIO_3_CFG_DIR                                      0x80 /* Pin Direction */
    #define IO_GPIO_3_CFG_PP                                       0x40 /* Enables Push/Pull, Otherwise pin is OpenDrain/floating */
    #define IO_GPIO_3_CFG_ALT                                      0x08 /* Indicates that GPIO is disabled because pin is being used for an alternate function (PWM, ADC, etc) */
    #define IO_GPIO_3_CFG_EN                                       0x01 /* Enables GPIO */
    /* GPIO_3_CFG -> IRQ */
    #define IO_GPIO_3_CFG_IRQ_FIELD_MASK                           0x30 /* Interrupt selection */
    #define IO_GPIO_3_CFG_IRQ_FIELD_OFFSET                         0x04
      #define IO_GPIO_3_CFG_IRQ_NONE                               0x00 /* No interrupt */
      #define IO_GPIO_3_CFG_IRQ_RISING                             0x01 /* Trigger on Rising */
      #define IO_GPIO_3_CFG_IRQ_FALLING                            0x02 /* Trigger on falling */
      #define IO_GPIO_3_CFG_IRQ_ANY                                0x03 /* Trigger on any */

/* GPIO_4_CFG Register Fields */
    /* GPIO_4_CFG -> Flags */
    #define IO_GPIO_4_CFG_DIR                                      0x80 /* Pin Direction */
    #define IO_GPIO_4_CFG_PP                                       0x40 /* Enables Push/Pull, Otherwise pin is OpenDrain/floating */
    #define IO_GPIO_4_CFG_ALT                                      0x08 /* Indicates that GPIO is disabled because pin is being used for an alternate function (PWM, ADC, etc) */
    #define IO_GPIO_4_CFG_EN                                       0x01 /* Enables GPIO */
    /* GPIO_4_CFG -> IRQ */
    #define IO_GPIO_4_CFG_IRQ_FIELD_MASK                           0x30 /* Interrupt selection */
    #define IO_GPIO_4_CFG_IRQ_FIELD_OFFSET                         0x04
      #define IO_GPIO_4_CFG_IRQ_NONE                               0x00 /* No interrupt */
      #define IO_GPIO_4_CFG_IRQ_RISING                             0x01 /* Trigger on Rising */
      #define IO_GPIO_4_CFG_IRQ_FALLING                            0x02 /* Trigger on falling */
      #define IO_GPIO_4_CFG_IRQ_ANY                                0x03 /* Trigger on any */

/* GPIO_5_CFG Register Fields */
    /* GPIO_5_CFG -> Flags */
    #define IO_GPIO_5_CFG_DIR                                      0x80 /* Pin Direction */
    #define IO_GPIO_5_CFG_PP                                       0x40 /* Enables Push/Pull, Otherwise pin is OpenDrain/floating */
    #define IO_GPIO_5_CFG_ALT                                      0x08 /* Indicates that GPIO is disabled because pin is being used for an alternate function (PWM, ADC, etc) */
    #define IO_GPIO_5_CFG_EN                                       0x01 /* Enables GPIO */
    /* GPIO_5_CFG -> IRQ */
    #define IO_GPIO_5_CFG_IRQ_FIELD_MASK                           0x30 /* Interrupt selection */
    #define IO_GPIO_5_CFG_IRQ_FIELD_OFFSET                         0x04
      #define IO_GPIO_5_CFG_IRQ_NONE                               0x00 /* No interrupt */
      #define IO_GPIO_5_CFG_IRQ_RISING                             0x01 /* Trigger on Rising */
      #define IO_GPIO_5_CFG_IRQ_FALLING                            0x02 /* Trigger on falling */
      #define IO_GPIO_5_CFG_IRQ_ANY                                0x03 /* Trigger on any */

/* GPIO_6_CFG Register Fields */
    /* GPIO_6_CFG -> Flags */
    #define IO_GPIO_6_CFG_DIR                                      0x80 /* Pin Direction */
    #define IO_GPIO_6_CFG_PP                                       0x40 /* Enables Push/Pull, Otherwise pin is OpenDrain/floating */
    #define IO_GPIO_6_CFG_ALT                                      0x08 /* Indicates that GPIO is disabled because pin is being used for an alternate function (PWM, ADC, etc) */
    #define IO_GPIO_6_CFG_EN                                       0x01 /* Enables GPIO */
    /* GPIO_6_CFG -> IRQ */
    #define IO_GPIO_6_CFG_IRQ_FIELD_MASK                           0x30 /* Interrupt selection */
    #define IO_GPIO_6_CFG_IRQ_FIELD_OFFSET                         0x04
      #define IO_GPIO_6_CFG_IRQ_NONE                               0x00 /* No interrupt */
      #define IO_GPIO_6_CFG_IRQ_RISING                             0x01 /* Trigger on Rising */
      #define IO_GPIO_6_CFG_IRQ_FALLING                            0x02 /* Trigger on falling */
      #define IO_GPIO_6_CFG_IRQ_ANY                                0x03 /* Trigger on any */

/* GPIO_7_CFG Register Fields */
    /* GPIO_7_CFG -> Flags */
    #define IO_GPIO_7_CFG_DIR                                      0x80 /* Pin Direction */
    #define IO_GPIO_7_CFG_PP                                       0x40 /* Enables Push/Pull, Otherwise pin is OpenDrain/floating */
    #define IO_GPIO_7_CFG_ALT                                      0x08 /* Indicates that GPIO is disabled because pin is being used for an alternate function (PWM, ADC, etc) */
    #define IO_GPIO_7_CFG_EN                                       0x01 /* Enables GPIO */
    /* GPIO_7_CFG -> IRQ */
    #define IO_GPIO_7_CFG_IRQ_FIELD_MASK                           0x30 /* Interrupt selection */
    #define IO_GPIO_7_CFG_IRQ_FIELD_OFFSET                         0x04
      #define IO_GPIO_7_CFG_IRQ_NONE                               0x00 /* No interrupt */
      #define IO_GPIO_7_CFG_IRQ_RISING                             0x01 /* Trigger on Rising */
      #define IO_GPIO_7_CFG_IRQ_FALLING                            0x02 /* Trigger on falling */
      #define IO_GPIO_7_CFG_IRQ_ANY                                0x03 /* Trigger on any */

/* GPIO_8_CFG Register Fields */
    /* GPIO_8_CFG -> Flags */
    #define IO_GPIO_8_CFG_DIR                                      0x80 /* Pin Direction */
    #define IO_GPIO_8_CFG_PP                                       0x40 /* Enables Push/Pull, Otherwise pin is OpenDrain/floating */
    #define IO_GPIO_8_CFG_ALT                                      0x08 /* Indicates that GPIO is disabled because pin is being used for an alternate function (PWM, ADC, etc) */
    #define IO_GPIO_8_CFG_EN                                       0x01 /* Enables GPIO */
    /* GPIO_8_CFG -> IRQ */
    #define IO_GPIO_8_CFG_IRQ_FIELD_MASK                           0x30 /* Interrupt selection */
    #define IO_GPIO_8_CFG_IRQ_FIELD_OFFSET                         0x04
      #define IO_GPIO_8_CFG_IRQ_NONE                               0x00 /* No interrupt */
      #define IO_GPIO_8_CFG_IRQ_RISING                             0x01 /* Trigger on Rising */
      #define IO_GPIO_8_CFG_IRQ_FALLING                            0x02 /* Trigger on falling */
      #define IO_GPIO_8_CFG_IRQ_ANY                                0x03 /* Trigger on any */

/* GPIO_9_CFG Register Fields */
    /* GPIO_9_CFG -> Flags */
    #define IO_GPIO_9_CFG_DIR                                      0x80 /* Pin Direction */
    #define IO_GPIO_9_CFG_PP                                       0x40 /* Enables Push/Pull, Otherwise pin is OpenDrain/floating */
    #define IO_GPIO_9_CFG_ALT                                      0x08 /* Indicates that GPIO is disabled because pin is being used for an alternate function (PWM, ADC, etc) */
    #define IO_GPIO_9_CFG_EN                                       0x01 /* Enables GPIO */
    /* GPIO_9_CFG -> IRQ */
    #define IO_GPIO_9_CFG_IRQ_FIELD_MASK                           0x30 /* Interrupt selection */
    #define IO_GPIO_9_CFG_IRQ_FIELD_OFFSET                         0x04
      #define IO_GPIO_9_CFG_IRQ_NONE                               0x00 /* No interrupt */
      #define IO_GPIO_9_CFG_IRQ_RISING                             0x01 /* Trigger on Rising */
      #define IO_GPIO_9_CFG_IRQ_FALLING                            0x02 /* Trigger on falling */
      #define IO_GPIO_9_CFG_IRQ_ANY                                0x03 /* Trigger on any */

/* GPIO_10_CFG Register Fields */
    /* GPIO_10_CFG -> Flags */
    #define IO_GPIO_10_CFG_DIR                                     0x80 /* Pin Direction */
    #define IO_GPIO_10_CFG_PP                                      0x40 /* Enables Push/Pull, Otherwise pin is OpenDrain/floating */
    #define IO_GPIO_10_CFG_ALT                                     0x08 /* Indicates that GPIO is disabled because pin is being used for an alternate function (PWM, ADC, etc) */
    #define IO_GPIO_10_CFG_EN                                      0x01 /* Enables GPIO */
    /* GPIO_10_CFG -> IRQ */
    #define IO_GPIO_10_CFG_IRQ_FIELD_MASK                          0x30 /* Interrupt selection */
    #define IO_GPIO_10_CFG_IRQ_FIELD_OFFSET                        0x04
      #define IO_GPIO_10_CFG_IRQ_NONE                              0x00 /* No interrupt */
      #define IO_GPIO_10_CFG_IRQ_RISING                            0x01 /* Trigger on Rising */
      #define IO_GPIO_10_CFG_IRQ_FALLING                           0x02 /* Trigger on falling */
      #define IO_GPIO_10_CFG_IRQ_ANY                               0x03 /* Trigger on any */

/* GPIO_11_CFG Register Fields */
    /* GPIO_11_CFG -> Flags */
    #define IO_GPIO_11_CFG_DIR                                     0x80 /* Pin Direction */
    #define IO_GPIO_11_CFG_PP                                      0x40 /* Enables Push/Pull, Otherwise pin is OpenDrain/floating */
    #define IO_GPIO_11_CFG_ALT                                     0x08 /* Indicates that GPIO is disabled because pin is being used for an alternate function (PWM, ADC, etc) */
    #define IO_GPIO_11_CFG_EN                                      0x01 /* Enables GPIO */
    /* GPIO_11_CFG -> IRQ */
    #define IO_GPIO_11_CFG_IRQ_FIELD_MASK                          0x30 /* Interrupt selection */
    #define IO_GPIO_11_CFG_IRQ_FIELD_OFFSET                        0x04
      #define IO_GPIO_11_CFG_IRQ_NONE                              0x00 /* No interrupt */
      #define IO_GPIO_11_CFG_IRQ_RISING                            0x01 /* Trigger on Rising */
      #define IO_GPIO_11_CFG_IRQ_FALLING                           0x02 /* Trigger on falling */
      #define IO_GPIO_11_CFG_IRQ_ANY                               0x03 /* Trigger on any */

/* GPIO_12_CFG Register Fields */
    /* GPIO_12_CFG -> Flags */
    #define IO_GPIO_12_CFG_DIR                                     0x80 /* Pin Direction */
    #define IO_GPIO_12_CFG_PP                                      0x40 /* Enables Push/Pull, Otherwise pin is OpenDrain/floating */
    #define IO_GPIO_12_CFG_ALT                                     0x08 /* Indicates that GPIO is disabled because pin is being used for an alternate function (PWM, ADC, etc) */
    #define IO_GPIO_12_CFG_EN                                      0x01 /* Enables GPIO */
    /* GPIO_12_CFG -> IRQ */
    #define IO_GPIO_12_CFG_IRQ_FIELD_MASK                          0x30 /* Interrupt selection */
    #define IO_GPIO_12_CFG_IRQ_FIELD_OFFSET                        0x04
      #define IO_GPIO_12_CFG_IRQ_NONE                              0x00 /* No interrupt */
      #define IO_GPIO_12_CFG_IRQ_RISING                            0x01 /* Trigger on Rising */
      #define IO_GPIO_12_CFG_IRQ_FALLING                           0x02 /* Trigger on falling */
      #define IO_GPIO_12_CFG_IRQ_ANY                               0x03 /* Trigger on any */

/* ADC_0_CFG Register Fields */
    /* ADC_0_CFG -> Flags */
    #define IO_ADC_0_CFG_EN                                        0x0001 /* Enables ADC Channel */
    /* ADC_0_CFG -> Treshold */
    #define IO_ADC_0_CFG_TRESHOLD_FIELD_MASK                       0xFFF0 /* IRQ threshold for ADC channel */
    #define IO_ADC_0_CFG_TRESHOLD_FIELD_OFFSET                     0x0004
    /* ADC_0_CFG -> IRQ */
    #define IO_ADC_0_CFG_IRQ_FIELD_MASK                            0x000C /* Interrupt setting for ADC channel */
    #define IO_ADC_0_CFG_IRQ_FIELD_OFFSET                          0x0002
      #define IO_ADC_0_CFG_IRQ_NONE                                0x0000 /* No interrupt */
      #define IO_ADC_0_CFG_IRQ_RISING                              0x0001 /* Trigger on Rising */
      #define IO_ADC_0_CFG_IRQ_FALLING                             0x0002 /* Trigger on falling */
      #define IO_ADC_0_CFG_IRQ_ANY                                 0x0003 /* Trigger on any */

/* ADC_1_CFG Register Fields */
    /* ADC_1_CFG -> Flags */
    #define IO_ADC_1_CFG_EN                                        0x0001 /* Enables ADC Channel */
    /* ADC_1_CFG -> Treshold */
    #define IO_ADC_1_CFG_TRESHOLD_FIELD_MASK                       0xFFF0 /* IRQ threshold for ADC channel */
    #define IO_ADC_1_CFG_TRESHOLD_FIELD_OFFSET                     0x0004
    /* ADC_1_CFG -> IRQ */
    #define IO_ADC_1_CFG_IRQ_FIELD_MASK                            0x000C /* Interrupt setting for ADC channel */
    #define IO_ADC_1_CFG_IRQ_FIELD_OFFSET                          0x0002
      #define IO_ADC_1_CFG_IRQ_NONE                                0x0000 /* No interrupt */
      #define IO_ADC_1_CFG_IRQ_RISING                              0x0001 /* Trigger on Rising */
      #define IO_ADC_1_CFG_IRQ_FALLING                             0x0002 /* Trigger on falling */
      #define IO_ADC_1_CFG_IRQ_ANY                                 0x0003 /* Trigger on any */

/* ADC_2_CFG Register Fields */
    /* ADC_2_CFG -> Flags */
    #define IO_ADC_2_CFG_EN                                        0x0001 /* Enables ADC Channel */
    /* ADC_2_CFG -> Treshold */
    #define IO_ADC_2_CFG_TRESHOLD_FIELD_MASK                       0xFFF0 /* IRQ threshold for ADC channel */
    #define IO_ADC_2_CFG_TRESHOLD_FIELD_OFFSET                     0x0004
    /* ADC_2_CFG -> IRQ */
    #define IO_ADC_2_CFG_IRQ_FIELD_MASK                            0x000C /* Interrupt setting for ADC channel */
    #define IO_ADC_2_CFG_IRQ_FIELD_OFFSET                          0x0002
      #define IO_ADC_2_CFG_IRQ_NONE                                0x0000 /* No interrupt */
      #define IO_ADC_2_CFG_IRQ_RISING                              0x0001 /* Trigger on Rising */
      #define IO_ADC_2_CFG_IRQ_FALLING                             0x0002 /* Trigger on falling */
      #define IO_ADC_2_CFG_IRQ_ANY                                 0x0003 /* Trigger on any */

/* ADC_3_CFG Register Fields */
    /* ADC_3_CFG -> Flags */
    #define IO_ADC_3_CFG_EN                                        0x0001 /* Enables ADC Channel */
    /* ADC_3_CFG -> Treshold */
    #define IO_ADC_3_CFG_TRESHOLD_FIELD_MASK                       0xFFF0 /* IRQ threshold for ADC channel */
    #define IO_ADC_3_CFG_TRESHOLD_FIELD_OFFSET                     0x0004
    /* ADC_3_CFG -> IRQ */
    #define IO_ADC_3_CFG_IRQ_FIELD_MASK                            0x000C /* Interrupt setting for ADC channel */
    #define IO_ADC_3_CFG_IRQ_FIELD_OFFSET                          0x0002
      #define IO_ADC_3_CFG_IRQ_NONE                                0x0000 /* No interrupt */
      #define IO_ADC_3_CFG_IRQ_RISING                              0x0001 /* Trigger on Rising */
      #define IO_ADC_3_CFG_IRQ_FALLING                             0x0002 /* Trigger on falling */
      #define IO_ADC_3_CFG_IRQ_ANY                                 0x0003 /* Trigger on any */

/* ADC_4_CFG Register Fields */
    /* ADC_4_CFG -> Flags */
    #define IO_ADC_4_CFG_EN                                        0x0001 /* Enables ADC Channel */
    /* ADC_4_CFG -> Treshold */
    #define IO_ADC_4_CFG_TRESHOLD_FIELD_MASK                       0xFFF0 /* IRQ threshold for ADC channel */
    #define IO_ADC_4_CFG_TRESHOLD_FIELD_OFFSET                     0x0004
    /* ADC_4_CFG -> IRQ */
    #define IO_ADC_4_CFG_IRQ_FIELD_MASK                            0x000C /* Interrupt setting for ADC channel */
    #define IO_ADC_4_CFG_IRQ_FIELD_OFFSET                          0x0002
      #define IO_ADC_4_CFG_IRQ_NONE                                0x0000 /* No interrupt */
      #define IO_ADC_4_CFG_IRQ_RISING                              0x0001 /* Trigger on Rising */
      #define IO_ADC_4_CFG_IRQ_FALLING                             0x0002 /* Trigger on falling */
      #define IO_ADC_4_CFG_IRQ_ANY                                 0x0003 /* Trigger on any */

/* PWM_CONFIG Register Fields */
    /* PWM_CONFIG -> Flags */
    #define IO_PWM_CONFIG_CH0_ENABLE                               0x00000001 /* Enables PWM channel 0 */
    #define IO_PWM_CONFIG_CH1_ENABLE                               0x00000002 /* Enables PWM channel 1 */
    #define IO_PWM_CONFIG_CH2_ENABLE                               0x00000004 /* Enables PWM channel 2 */
    #define IO_PWM_CONFIG_CH3_ENABLE                               0x00000008 /* Enables PWM channel 3 */
    #define IO_PWM_CONFIG_CH4_ENABLE                               0x00000010 /* Enables PWM channel 4 */
    #define IO_PWM_CONFIG_CH5_ENABLE                               0x00000020 /* Enables PWM channel 5 */
    #define IO_PWM_CONFIG_CH6_ENABLE                               0x00000040 /* Enables PWM channel 6 */
    #define IO_PWM_CONFIG_CH7_ENABLE                               0x00000080 /* Enables PWM channel 7 */
    /* PWM_CONFIG -> Period */
    #define IO_PWM_CONFIG_PERIOD_FIELD_MASK                        0xFFFF0000 /* Period for PWM signals */
    #define IO_PWM_CONFIG_PERIOD_FIELD_OFFSET                      0x00000010
    /* PWM_CONFIG -> Prescaler */
    #define IO_PWM_CONFIG_PRESCALER_FIELD_MASK                     0x0000F000 /* Prescaler for PWM, using 16Mhz clock */
    #define IO_PWM_CONFIG_PRESCALER_FIELD_OFFSET                   0x0000000C
      #define IO_PWM_CONFIG_PRESCALER_PRESCALER_1                  0x00000000 /* divide clock by 1 (16Mhz) */
      #define IO_PWM_CONFIG_PRESCALER_PRESCALER_2                  0x00000001 /* divide clock by 2 (8Mhz) */
      #define IO_PWM_CONFIG_PRESCALER_PRESCALER_4                  0x00000002 /* divide clock by 4  (4Mhz) */
      #define IO_PWM_CONFIG_PRESCALER_PRESCALER_8                  0x00000003 /* divide clock by 8  (2Mhz) */
      #define IO_PWM_CONFIG_PRESCALER_PRESCALER_16                 0x00000004 /* divide clock by 16  (1Mhz) */
      #define IO_PWM_CONFIG_PRESCALER_PRESCALER_32                 0x00000005 /* divide clock by 32  (500Khz) */
      #define IO_PWM_CONFIG_PRESCALER_PRESCALER_64                 0x00000006 /* divide clock by 64  (250Khz) */
      #define IO_PWM_CONFIG_PRESCALER_PRESCALER_128                0x00000007 /* divide clock by 128 (125Khz) */
      #define IO_PWM_CONFIG_PRESCALER_PRESCALER_256                0x00000008 /* divide clock by 256 (62.5 Khz) */
      #define IO_PWM_CONFIG_PRESCALER_PRESCALER_512                0x00000009 /* divide clock by 512  (31.25 Khz) */
      #define IO_PWM_CONFIG_PRESCALER_PRESCALER_1024               0x0000000A /* divide clock by 1024 (1.5625 KHz) */
      #define IO_PWM_CONFIG_PRESCALER_PRESCALER_2048               0x0000000B /* divide clock by 2048  () */
      #define IO_PWM_CONFIG_PRESCALER_PRESCALER_4096               0x0000000C /* divide clock by 4096  () */
      #define IO_PWM_CONFIG_PRESCALER_PRESCALER_8192               0x0000000D /* divide clock by 8192  () */
      #define IO_PWM_CONFIG_PRESCALER_PRESCALER_16384              0x0000000E /* divide clock by 16384 () */
      #define IO_PWM_CONFIG_PRESCALER_PRESCALER_32768              0x0000000F /* divide clock by 32768 () */

/* WHO_AM_I Register Fields */
    /* WHO_AM_I -> WHO_AM_I */
    #define IO_WHO_AM_I_WHO_AM_I_FIELD_MASK                        0xFF /* Device ID */
    #define IO_WHO_AM_I_WHO_AM_I_FIELD_OFFSET                      0x00


/*******************************************************************************
  Default Values                                                                              
*******************************************************************************/

#define IO_WHO_AM_I_DEFAULT                                        0xAB

/*******************************************************************************
  Flag Set/Clear/Check                                                                             
*******************************************************************************/

/**
  *@brief sets flags on device
  *@param dev ptr to stm8_expander device
  *@param reg ptr to register definition
  *@param mask mask of flags to set
  */
#define io_set_flag(dev, reg, mask) regdev_set_flags(&(dev)->mRegDev,(reg), (mask))

/**
  *@brief clears flags on device
  *@param dev ptr to stm8_expander device
  *@param reg ptr to register definition
  *@param mask mask of flags to set
  */
#define io_clear_flag(dev, reg, mask) regdev_clear_flags(&(dev)->mRegDev,(reg), (mask))

/**
  *@brief checks flags on device
  *@param dev ptr to stm8_expander device
  *@param reg ptr to register definition
  *@param mask mask of flags to set
  *@return true if all flags in mask are set 
  *@return false if any flags in mask are not set
  */
#define io_check_flag(dev, reg, mask) regdev_check_flags(&(dev)->mRegDev,(reg), (mask))

/*******************************************************************************
  Field Getters                                                                              
*******************************************************************************/

/**
 * @brief reads the GPIO_IN field from the GPIO_IN register 
 * @param dev ptr to stm8_expander device
 */
#define io_get_gpio_in(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mGpioIn, IO_GPIO_IN_GPIO_IN_FIELD_MASK )
/**
 * @brief reads the GPIO_OUT field from the GPIO_OUT register 
 * @param dev ptr to stm8_expander device
 */
#define io_get_gpio_out(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mGpioOut, IO_GPIO_OUT_GPIO_OUT_FIELD_MASK )
/**
 * @brief reads the ADC_0_VAL field from the ADC_0_VAL register 
 * @param dev ptr to stm8_expander device
 */
#define io_get_adc_0_val(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mAdc0Val, IO_ADC_0_VAL_ADC_0_VAL_FIELD_MASK )
/**
 * @brief reads the ADC_1_VAL field from the ADC_1_VAL register 
 * @param dev ptr to stm8_expander device
 */
#define io_get_adc_1_val(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mAdc1Val, IO_ADC_1_VAL_ADC_1_VAL_FIELD_MASK )
/**
 * @brief reads the ADC_2_VAL field from the ADC_2_VAL register 
 * @param dev ptr to stm8_expander device
 */
#define io_get_adc_2_val(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mAdc2Val, IO_ADC_2_VAL_ADC_2_VAL_FIELD_MASK )
/**
 * @brief reads the ADC_3_VAL field from the ADC_3_VAL register 
 * @param dev ptr to stm8_expander device
 */
#define io_get_adc_3_val(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mAdc3Val, IO_ADC_3_VAL_ADC_3_VAL_FIELD_MASK )
/**
 * @brief reads the ADC_4_VAL field from the ADC_4_VAL register 
 * @param dev ptr to stm8_expander device
 */
#define io_get_adc_4_val(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mAdc4Val, IO_ADC_4_VAL_ADC_4_VAL_FIELD_MASK )
/**
 * @brief reads the IRQ_SRC field from the IRQ_SRC register 
 * @param dev ptr to stm8_expander device
 */
#define io_get_irq_src(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mIrqSrc, IO_IRQ_SRC_IRQ_SRC_FIELD_MASK )
/**
 * @brief reads the IRQ field from the GPIO_0_CFG register 
 * @param dev ptr to stm8_expander device
 * @return IO_GPIO_0_CFG_IRQ_NONE No interrupt
 * @return IO_GPIO_0_CFG_IRQ_RISING Trigger on Rising
 * @return IO_GPIO_0_CFG_IRQ_FALLING Trigger on falling
 * @return IO_GPIO_0_CFG_IRQ_ANY Trigger on any
 */
#define io_get_gpio_0_cfg_irq(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mGpio0Cfg, IO_GPIO_0_CFG_IRQ_FIELD_MASK )
/**
 * @brief reads the IRQ field from the GPIO_1_CFG register 
 * @param dev ptr to stm8_expander device
 * @return IO_GPIO_1_CFG_IRQ_NONE No interrupt
 * @return IO_GPIO_1_CFG_IRQ_RISING Trigger on Rising
 * @return IO_GPIO_1_CFG_IRQ_FALLING Trigger on falling
 * @return IO_GPIO_1_CFG_IRQ_ANY Trigger on any
 */
#define io_get_gpio_1_cfg_irq(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mGpio1Cfg, IO_GPIO_1_CFG_IRQ_FIELD_MASK )
/**
 * @brief reads the IRQ field from the GPIO_2_CFG register 
 * @param dev ptr to stm8_expander device
 * @return IO_GPIO_2_CFG_IRQ_NONE No interrupt
 * @return IO_GPIO_2_CFG_IRQ_RISING Trigger on Rising
 * @return IO_GPIO_2_CFG_IRQ_FALLING Trigger on falling
 * @return IO_GPIO_2_CFG_IRQ_ANY Trigger on any
 */
#define io_get_gpio_2_cfg_irq(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mGpio2Cfg, IO_GPIO_2_CFG_IRQ_FIELD_MASK )
/**
 * @brief reads the IRQ field from the GPIO_3_CFG register 
 * @param dev ptr to stm8_expander device
 * @return IO_GPIO_3_CFG_IRQ_NONE No interrupt
 * @return IO_GPIO_3_CFG_IRQ_RISING Trigger on Rising
 * @return IO_GPIO_3_CFG_IRQ_FALLING Trigger on falling
 * @return IO_GPIO_3_CFG_IRQ_ANY Trigger on any
 */
#define io_get_gpio_3_cfg_irq(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mGpio3Cfg, IO_GPIO_3_CFG_IRQ_FIELD_MASK )
/**
 * @brief reads the IRQ field from the GPIO_4_CFG register 
 * @param dev ptr to stm8_expander device
 * @return IO_GPIO_4_CFG_IRQ_NONE No interrupt
 * @return IO_GPIO_4_CFG_IRQ_RISING Trigger on Rising
 * @return IO_GPIO_4_CFG_IRQ_FALLING Trigger on falling
 * @return IO_GPIO_4_CFG_IRQ_ANY Trigger on any
 */
#define io_get_gpio_4_cfg_irq(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mGpio4Cfg, IO_GPIO_4_CFG_IRQ_FIELD_MASK )
/**
 * @brief reads the IRQ field from the GPIO_5_CFG register 
 * @param dev ptr to stm8_expander device
 * @return IO_GPIO_5_CFG_IRQ_NONE No interrupt
 * @return IO_GPIO_5_CFG_IRQ_RISING Trigger on Rising
 * @return IO_GPIO_5_CFG_IRQ_FALLING Trigger on falling
 * @return IO_GPIO_5_CFG_IRQ_ANY Trigger on any
 */
#define io_get_gpio_5_cfg_irq(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mGpio5Cfg, IO_GPIO_5_CFG_IRQ_FIELD_MASK )
/**
 * @brief reads the IRQ field from the GPIO_6_CFG register 
 * @param dev ptr to stm8_expander device
 * @return IO_GPIO_6_CFG_IRQ_NONE No interrupt
 * @return IO_GPIO_6_CFG_IRQ_RISING Trigger on Rising
 * @return IO_GPIO_6_CFG_IRQ_FALLING Trigger on falling
 * @return IO_GPIO_6_CFG_IRQ_ANY Trigger on any
 */
#define io_get_gpio_6_cfg_irq(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mGpio6Cfg, IO_GPIO_6_CFG_IRQ_FIELD_MASK )
/**
 * @brief reads the IRQ field from the GPIO_7_CFG register 
 * @param dev ptr to stm8_expander device
 * @return IO_GPIO_7_CFG_IRQ_NONE No interrupt
 * @return IO_GPIO_7_CFG_IRQ_RISING Trigger on Rising
 * @return IO_GPIO_7_CFG_IRQ_FALLING Trigger on falling
 * @return IO_GPIO_7_CFG_IRQ_ANY Trigger on any
 */
#define io_get_gpio_7_cfg_irq(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mGpio7Cfg, IO_GPIO_7_CFG_IRQ_FIELD_MASK )
/**
 * @brief reads the IRQ field from the GPIO_8_CFG register 
 * @param dev ptr to stm8_expander device
 * @return IO_GPIO_8_CFG_IRQ_NONE No interrupt
 * @return IO_GPIO_8_CFG_IRQ_RISING Trigger on Rising
 * @return IO_GPIO_8_CFG_IRQ_FALLING Trigger on falling
 * @return IO_GPIO_8_CFG_IRQ_ANY Trigger on any
 */
#define io_get_gpio_8_cfg_irq(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mGpio8Cfg, IO_GPIO_8_CFG_IRQ_FIELD_MASK )
/**
 * @brief reads the IRQ field from the GPIO_9_CFG register 
 * @param dev ptr to stm8_expander device
 * @return IO_GPIO_9_CFG_IRQ_NONE No interrupt
 * @return IO_GPIO_9_CFG_IRQ_RISING Trigger on Rising
 * @return IO_GPIO_9_CFG_IRQ_FALLING Trigger on falling
 * @return IO_GPIO_9_CFG_IRQ_ANY Trigger on any
 */
#define io_get_gpio_9_cfg_irq(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mGpio9Cfg, IO_GPIO_9_CFG_IRQ_FIELD_MASK )
/**
 * @brief reads the IRQ field from the GPIO_10_CFG register 
 * @param dev ptr to stm8_expander device
 * @return IO_GPIO_10_CFG_IRQ_NONE No interrupt
 * @return IO_GPIO_10_CFG_IRQ_RISING Trigger on Rising
 * @return IO_GPIO_10_CFG_IRQ_FALLING Trigger on falling
 * @return IO_GPIO_10_CFG_IRQ_ANY Trigger on any
 */
#define io_get_gpio_10_cfg_irq(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mGpio10Cfg, IO_GPIO_10_CFG_IRQ_FIELD_MASK )
/**
 * @brief reads the IRQ field from the GPIO_11_CFG register 
 * @param dev ptr to stm8_expander device
 * @return IO_GPIO_11_CFG_IRQ_NONE No interrupt
 * @return IO_GPIO_11_CFG_IRQ_RISING Trigger on Rising
 * @return IO_GPIO_11_CFG_IRQ_FALLING Trigger on falling
 * @return IO_GPIO_11_CFG_IRQ_ANY Trigger on any
 */
#define io_get_gpio_11_cfg_irq(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mGpio11Cfg, IO_GPIO_11_CFG_IRQ_FIELD_MASK )
/**
 * @brief reads the IRQ field from the GPIO_12_CFG register 
 * @param dev ptr to stm8_expander device
 * @return IO_GPIO_12_CFG_IRQ_NONE No interrupt
 * @return IO_GPIO_12_CFG_IRQ_RISING Trigger on Rising
 * @return IO_GPIO_12_CFG_IRQ_FALLING Trigger on falling
 * @return IO_GPIO_12_CFG_IRQ_ANY Trigger on any
 */
#define io_get_gpio_12_cfg_irq(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mGpio12Cfg, IO_GPIO_12_CFG_IRQ_FIELD_MASK )
/**
 * @brief reads the Treshold field from the ADC_0_CFG register 
 * @param dev ptr to stm8_expander device
 */
#define io_get_adc_0_cfg_treshold(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mAdc0Cfg, IO_ADC_0_CFG_TRESHOLD_FIELD_MASK )
/**
 * @brief reads the IRQ field from the ADC_0_CFG register 
 * @param dev ptr to stm8_expander device
 * @return IO_ADC_0_CFG_IRQ_NONE No interrupt
 * @return IO_ADC_0_CFG_IRQ_RISING Trigger on Rising
 * @return IO_ADC_0_CFG_IRQ_FALLING Trigger on falling
 * @return IO_ADC_0_CFG_IRQ_ANY Trigger on any
 */
#define io_get_adc_0_cfg_irq(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mAdc0Cfg, IO_ADC_0_CFG_IRQ_FIELD_MASK )
/**
 * @brief reads the Treshold field from the ADC_1_CFG register 
 * @param dev ptr to stm8_expander device
 */
#define io_get_adc_1_cfg_treshold(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mAdc1Cfg, IO_ADC_1_CFG_TRESHOLD_FIELD_MASK )
/**
 * @brief reads the IRQ field from the ADC_1_CFG register 
 * @param dev ptr to stm8_expander device
 * @return IO_ADC_1_CFG_IRQ_NONE No interrupt
 * @return IO_ADC_1_CFG_IRQ_RISING Trigger on Rising
 * @return IO_ADC_1_CFG_IRQ_FALLING Trigger on falling
 * @return IO_ADC_1_CFG_IRQ_ANY Trigger on any
 */
#define io_get_adc_1_cfg_irq(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mAdc1Cfg, IO_ADC_1_CFG_IRQ_FIELD_MASK )
/**
 * @brief reads the Treshold field from the ADC_2_CFG register 
 * @param dev ptr to stm8_expander device
 */
#define io_get_adc_2_cfg_treshold(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mAdc2Cfg, IO_ADC_2_CFG_TRESHOLD_FIELD_MASK )
/**
 * @brief reads the IRQ field from the ADC_2_CFG register 
 * @param dev ptr to stm8_expander device
 * @return IO_ADC_2_CFG_IRQ_NONE No interrupt
 * @return IO_ADC_2_CFG_IRQ_RISING Trigger on Rising
 * @return IO_ADC_2_CFG_IRQ_FALLING Trigger on falling
 * @return IO_ADC_2_CFG_IRQ_ANY Trigger on any
 */
#define io_get_adc_2_cfg_irq(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mAdc2Cfg, IO_ADC_2_CFG_IRQ_FIELD_MASK )
/**
 * @brief reads the Treshold field from the ADC_3_CFG register 
 * @param dev ptr to stm8_expander device
 */
#define io_get_adc_3_cfg_treshold(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mAdc3Cfg, IO_ADC_3_CFG_TRESHOLD_FIELD_MASK )
/**
 * @brief reads the IRQ field from the ADC_3_CFG register 
 * @param dev ptr to stm8_expander device
 * @return IO_ADC_3_CFG_IRQ_NONE No interrupt
 * @return IO_ADC_3_CFG_IRQ_RISING Trigger on Rising
 * @return IO_ADC_3_CFG_IRQ_FALLING Trigger on falling
 * @return IO_ADC_3_CFG_IRQ_ANY Trigger on any
 */
#define io_get_adc_3_cfg_irq(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mAdc3Cfg, IO_ADC_3_CFG_IRQ_FIELD_MASK )
/**
 * @brief reads the Treshold field from the ADC_4_CFG register 
 * @param dev ptr to stm8_expander device
 */
#define io_get_adc_4_cfg_treshold(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mAdc4Cfg, IO_ADC_4_CFG_TRESHOLD_FIELD_MASK )
/**
 * @brief reads the IRQ field from the ADC_4_CFG register 
 * @param dev ptr to stm8_expander device
 * @return IO_ADC_4_CFG_IRQ_NONE No interrupt
 * @return IO_ADC_4_CFG_IRQ_RISING Trigger on Rising
 * @return IO_ADC_4_CFG_IRQ_FALLING Trigger on falling
 * @return IO_ADC_4_CFG_IRQ_ANY Trigger on any
 */
#define io_get_adc_4_cfg_irq(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mAdc4Cfg, IO_ADC_4_CFG_IRQ_FIELD_MASK )
/**
 * @brief reads the Period field from the PWM_CONFIG register 
 * @param dev ptr to stm8_expander device
 */
#define io_get_pwm_config_period(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mPwmConfig, IO_PWM_CONFIG_PERIOD_FIELD_MASK )
/**
 * @brief reads the Prescaler field from the PWM_CONFIG register 
 * @param dev ptr to stm8_expander device
 * @return IO_PWM_CONFIG_PRESCALER_PRESCALER_1 divide clock by 1 (16Mhz)
 * @return IO_PWM_CONFIG_PRESCALER_PRESCALER_2 divide clock by 2 (8Mhz)
 * @return IO_PWM_CONFIG_PRESCALER_PRESCALER_4 divide clock by 4  (4Mhz)
 * @return IO_PWM_CONFIG_PRESCALER_PRESCALER_8 divide clock by 8  (2Mhz)
 * @return IO_PWM_CONFIG_PRESCALER_PRESCALER_16 divide clock by 16  (1Mhz)
 * @return IO_PWM_CONFIG_PRESCALER_PRESCALER_32 divide clock by 32  (500Khz)
 * @return IO_PWM_CONFIG_PRESCALER_PRESCALER_64 divide clock by 64  (250Khz)
 * @return IO_PWM_CONFIG_PRESCALER_PRESCALER_128 divide clock by 128 (125Khz)
 * @return IO_PWM_CONFIG_PRESCALER_PRESCALER_256 divide clock by 256 (62.5 Khz)
 * @return IO_PWM_CONFIG_PRESCALER_PRESCALER_512 divide clock by 512  (31.25 Khz)
 * @return IO_PWM_CONFIG_PRESCALER_PRESCALER_1024 divide clock by 1024 (1.5625 KHz)
 * @return IO_PWM_CONFIG_PRESCALER_PRESCALER_2048 divide clock by 2048  ()
 * @return IO_PWM_CONFIG_PRESCALER_PRESCALER_4096 divide clock by 4096  ()
 * @return IO_PWM_CONFIG_PRESCALER_PRESCALER_8192 divide clock by 8192  ()
 * @return IO_PWM_CONFIG_PRESCALER_PRESCALER_16384 divide clock by 16384 ()
 * @return IO_PWM_CONFIG_PRESCALER_PRESCALER_32768 divide clock by 32768 ()
 */
#define io_get_pwm_config_prescaler(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mPwmConfig, IO_PWM_CONFIG_PRESCALER_FIELD_MASK )
/**
 * @brief reads the WHO_AM_I field from the WHO_AM_I register 
 * @param dev ptr to stm8_expander device
 */
#define io_get_who_am_i(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mWhoAmI, IO_WHO_AM_I_WHO_AM_I_FIELD_MASK )


/*******************************************************************************
  Field Setters                                                                              
*******************************************************************************/

/**
 * @brief writes the GPIO_OUT field to the GPIO_OUT register 
 * @param dev ptr to stm8_expander device
 */
#define io_set_gpio_out(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mGpioOut, IO_GPIO_OUT_GPIO_OUT_FIELD_MASK , (val) )
/**
 * @brief writes the PWM_0_VAL field to the PWM_0_VAL register 
 * @param dev ptr to stm8_expander device
 */
#define io_set_pwm_0_val(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mPwm0Val, IO_PWM_0_VAL_PWM_0_VAL_FIELD_MASK , (val) )
/**
 * @brief writes the PWM_1_VAL field to the PWM_1_VAL register 
 * @param dev ptr to stm8_expander device
 */
#define io_set_pwm_1_val(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mPwm1Val, IO_PWM_1_VAL_PWM_1_VAL_FIELD_MASK , (val) )
/**
 * @brief writes the PWM_2_VAL field to the PWM_2_VAL register 
 * @param dev ptr to stm8_expander device
 */
#define io_set_pwm_2_val(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mPwm2Val, IO_PWM_2_VAL_PWM_2_VAL_FIELD_MASK , (val) )
/**
 * @brief writes the PWM_3_VAL field to the PWM_3_VAL register 
 * @param dev ptr to stm8_expander device
 */
#define io_set_pwm_3_val(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mPwm3Val, IO_PWM_3_VAL_PWM_3_VAL_FIELD_MASK , (val) )
/**
 * @brief writes the PWM_4_VAL field to the PWM_4_VAL register 
 * @param dev ptr to stm8_expander device
 */
#define io_set_pwm_4_val(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mPwm4Val, IO_PWM_4_VAL_PWM_4_VAL_FIELD_MASK , (val) )
/**
 * @brief writes the PWM_5_VAL field to the PWM_5_VAL register 
 * @param dev ptr to stm8_expander device
 */
#define io_set_pwm_5_val(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mPwm5Val, IO_PWM_5_VAL_PWM_5_VAL_FIELD_MASK , (val) )
/**
 * @brief writes the IRQ field to the GPIO_0_CFG register 
 * @param dev ptr to stm8_expander device
 * @option IO_GPIO_0_CFG_IRQ_NONE No interrupt
 * @option IO_GPIO_0_CFG_IRQ_RISING Trigger on Rising
 * @option IO_GPIO_0_CFG_IRQ_FALLING Trigger on falling
 * @option IO_GPIO_0_CFG_IRQ_ANY Trigger on any
 */
#define io_set_gpio_0_cfg_irq(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mGpio0Cfg, IO_GPIO_0_CFG_IRQ_FIELD_MASK , (val) )
/**
 * @brief writes the IRQ field to the GPIO_1_CFG register 
 * @param dev ptr to stm8_expander device
 * @option IO_GPIO_1_CFG_IRQ_NONE No interrupt
 * @option IO_GPIO_1_CFG_IRQ_RISING Trigger on Rising
 * @option IO_GPIO_1_CFG_IRQ_FALLING Trigger on falling
 * @option IO_GPIO_1_CFG_IRQ_ANY Trigger on any
 */
#define io_set_gpio_1_cfg_irq(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mGpio1Cfg, IO_GPIO_1_CFG_IRQ_FIELD_MASK , (val) )
/**
 * @brief writes the IRQ field to the GPIO_2_CFG register 
 * @param dev ptr to stm8_expander device
 * @option IO_GPIO_2_CFG_IRQ_NONE No interrupt
 * @option IO_GPIO_2_CFG_IRQ_RISING Trigger on Rising
 * @option IO_GPIO_2_CFG_IRQ_FALLING Trigger on falling
 * @option IO_GPIO_2_CFG_IRQ_ANY Trigger on any
 */
#define io_set_gpio_2_cfg_irq(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mGpio2Cfg, IO_GPIO_2_CFG_IRQ_FIELD_MASK , (val) )
/**
 * @brief writes the IRQ field to the GPIO_3_CFG register 
 * @param dev ptr to stm8_expander device
 * @option IO_GPIO_3_CFG_IRQ_NONE No interrupt
 * @option IO_GPIO_3_CFG_IRQ_RISING Trigger on Rising
 * @option IO_GPIO_3_CFG_IRQ_FALLING Trigger on falling
 * @option IO_GPIO_3_CFG_IRQ_ANY Trigger on any
 */
#define io_set_gpio_3_cfg_irq(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mGpio3Cfg, IO_GPIO_3_CFG_IRQ_FIELD_MASK , (val) )
/**
 * @brief writes the IRQ field to the GPIO_4_CFG register 
 * @param dev ptr to stm8_expander device
 * @option IO_GPIO_4_CFG_IRQ_NONE No interrupt
 * @option IO_GPIO_4_CFG_IRQ_RISING Trigger on Rising
 * @option IO_GPIO_4_CFG_IRQ_FALLING Trigger on falling
 * @option IO_GPIO_4_CFG_IRQ_ANY Trigger on any
 */
#define io_set_gpio_4_cfg_irq(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mGpio4Cfg, IO_GPIO_4_CFG_IRQ_FIELD_MASK , (val) )
/**
 * @brief writes the IRQ field to the GPIO_5_CFG register 
 * @param dev ptr to stm8_expander device
 * @option IO_GPIO_5_CFG_IRQ_NONE No interrupt
 * @option IO_GPIO_5_CFG_IRQ_RISING Trigger on Rising
 * @option IO_GPIO_5_CFG_IRQ_FALLING Trigger on falling
 * @option IO_GPIO_5_CFG_IRQ_ANY Trigger on any
 */
#define io_set_gpio_5_cfg_irq(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mGpio5Cfg, IO_GPIO_5_CFG_IRQ_FIELD_MASK , (val) )
/**
 * @brief writes the IRQ field to the GPIO_6_CFG register 
 * @param dev ptr to stm8_expander device
 * @option IO_GPIO_6_CFG_IRQ_NONE No interrupt
 * @option IO_GPIO_6_CFG_IRQ_RISING Trigger on Rising
 * @option IO_GPIO_6_CFG_IRQ_FALLING Trigger on falling
 * @option IO_GPIO_6_CFG_IRQ_ANY Trigger on any
 */
#define io_set_gpio_6_cfg_irq(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mGpio6Cfg, IO_GPIO_6_CFG_IRQ_FIELD_MASK , (val) )
/**
 * @brief writes the IRQ field to the GPIO_7_CFG register 
 * @param dev ptr to stm8_expander device
 * @option IO_GPIO_7_CFG_IRQ_NONE No interrupt
 * @option IO_GPIO_7_CFG_IRQ_RISING Trigger on Rising
 * @option IO_GPIO_7_CFG_IRQ_FALLING Trigger on falling
 * @option IO_GPIO_7_CFG_IRQ_ANY Trigger on any
 */
#define io_set_gpio_7_cfg_irq(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mGpio7Cfg, IO_GPIO_7_CFG_IRQ_FIELD_MASK , (val) )
/**
 * @brief writes the IRQ field to the GPIO_8_CFG register 
 * @param dev ptr to stm8_expander device
 * @option IO_GPIO_8_CFG_IRQ_NONE No interrupt
 * @option IO_GPIO_8_CFG_IRQ_RISING Trigger on Rising
 * @option IO_GPIO_8_CFG_IRQ_FALLING Trigger on falling
 * @option IO_GPIO_8_CFG_IRQ_ANY Trigger on any
 */
#define io_set_gpio_8_cfg_irq(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mGpio8Cfg, IO_GPIO_8_CFG_IRQ_FIELD_MASK , (val) )
/**
 * @brief writes the IRQ field to the GPIO_9_CFG register 
 * @param dev ptr to stm8_expander device
 * @option IO_GPIO_9_CFG_IRQ_NONE No interrupt
 * @option IO_GPIO_9_CFG_IRQ_RISING Trigger on Rising
 * @option IO_GPIO_9_CFG_IRQ_FALLING Trigger on falling
 * @option IO_GPIO_9_CFG_IRQ_ANY Trigger on any
 */
#define io_set_gpio_9_cfg_irq(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mGpio9Cfg, IO_GPIO_9_CFG_IRQ_FIELD_MASK , (val) )
/**
 * @brief writes the IRQ field to the GPIO_10_CFG register 
 * @param dev ptr to stm8_expander device
 * @option IO_GPIO_10_CFG_IRQ_NONE No interrupt
 * @option IO_GPIO_10_CFG_IRQ_RISING Trigger on Rising
 * @option IO_GPIO_10_CFG_IRQ_FALLING Trigger on falling
 * @option IO_GPIO_10_CFG_IRQ_ANY Trigger on any
 */
#define io_set_gpio_10_cfg_irq(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mGpio10Cfg, IO_GPIO_10_CFG_IRQ_FIELD_MASK , (val) )
/**
 * @brief writes the IRQ field to the GPIO_11_CFG register 
 * @param dev ptr to stm8_expander device
 * @option IO_GPIO_11_CFG_IRQ_NONE No interrupt
 * @option IO_GPIO_11_CFG_IRQ_RISING Trigger on Rising
 * @option IO_GPIO_11_CFG_IRQ_FALLING Trigger on falling
 * @option IO_GPIO_11_CFG_IRQ_ANY Trigger on any
 */
#define io_set_gpio_11_cfg_irq(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mGpio11Cfg, IO_GPIO_11_CFG_IRQ_FIELD_MASK , (val) )
/**
 * @brief writes the IRQ field to the GPIO_12_CFG register 
 * @param dev ptr to stm8_expander device
 * @option IO_GPIO_12_CFG_IRQ_NONE No interrupt
 * @option IO_GPIO_12_CFG_IRQ_RISING Trigger on Rising
 * @option IO_GPIO_12_CFG_IRQ_FALLING Trigger on falling
 * @option IO_GPIO_12_CFG_IRQ_ANY Trigger on any
 */
#define io_set_gpio_12_cfg_irq(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mGpio12Cfg, IO_GPIO_12_CFG_IRQ_FIELD_MASK , (val) )
/**
 * @brief writes the Treshold field to the ADC_0_CFG register 
 * @param dev ptr to stm8_expander device
 */
#define io_set_adc_0_cfg_treshold(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mAdc0Cfg, IO_ADC_0_CFG_TRESHOLD_FIELD_MASK , (val) )
/**
 * @brief writes the IRQ field to the ADC_0_CFG register 
 * @param dev ptr to stm8_expander device
 * @option IO_ADC_0_CFG_IRQ_NONE No interrupt
 * @option IO_ADC_0_CFG_IRQ_RISING Trigger on Rising
 * @option IO_ADC_0_CFG_IRQ_FALLING Trigger on falling
 * @option IO_ADC_0_CFG_IRQ_ANY Trigger on any
 */
#define io_set_adc_0_cfg_irq(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mAdc0Cfg, IO_ADC_0_CFG_IRQ_FIELD_MASK , (val) )
/**
 * @brief writes the Treshold field to the ADC_1_CFG register 
 * @param dev ptr to stm8_expander device
 */
#define io_set_adc_1_cfg_treshold(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mAdc1Cfg, IO_ADC_1_CFG_TRESHOLD_FIELD_MASK , (val) )
/**
 * @brief writes the IRQ field to the ADC_1_CFG register 
 * @param dev ptr to stm8_expander device
 * @option IO_ADC_1_CFG_IRQ_NONE No interrupt
 * @option IO_ADC_1_CFG_IRQ_RISING Trigger on Rising
 * @option IO_ADC_1_CFG_IRQ_FALLING Trigger on falling
 * @option IO_ADC_1_CFG_IRQ_ANY Trigger on any
 */
#define io_set_adc_1_cfg_irq(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mAdc1Cfg, IO_ADC_1_CFG_IRQ_FIELD_MASK , (val) )
/**
 * @brief writes the Treshold field to the ADC_2_CFG register 
 * @param dev ptr to stm8_expander device
 */
#define io_set_adc_2_cfg_treshold(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mAdc2Cfg, IO_ADC_2_CFG_TRESHOLD_FIELD_MASK , (val) )
/**
 * @brief writes the IRQ field to the ADC_2_CFG register 
 * @param dev ptr to stm8_expander device
 * @option IO_ADC_2_CFG_IRQ_NONE No interrupt
 * @option IO_ADC_2_CFG_IRQ_RISING Trigger on Rising
 * @option IO_ADC_2_CFG_IRQ_FALLING Trigger on falling
 * @option IO_ADC_2_CFG_IRQ_ANY Trigger on any
 */
#define io_set_adc_2_cfg_irq(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mAdc2Cfg, IO_ADC_2_CFG_IRQ_FIELD_MASK , (val) )
/**
 * @brief writes the Treshold field to the ADC_3_CFG register 
 * @param dev ptr to stm8_expander device
 */
#define io_set_adc_3_cfg_treshold(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mAdc3Cfg, IO_ADC_3_CFG_TRESHOLD_FIELD_MASK , (val) )
/**
 * @brief writes the IRQ field to the ADC_3_CFG register 
 * @param dev ptr to stm8_expander device
 * @option IO_ADC_3_CFG_IRQ_NONE No interrupt
 * @option IO_ADC_3_CFG_IRQ_RISING Trigger on Rising
 * @option IO_ADC_3_CFG_IRQ_FALLING Trigger on falling
 * @option IO_ADC_3_CFG_IRQ_ANY Trigger on any
 */
#define io_set_adc_3_cfg_irq(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mAdc3Cfg, IO_ADC_3_CFG_IRQ_FIELD_MASK , (val) )
/**
 * @brief writes the Treshold field to the ADC_4_CFG register 
 * @param dev ptr to stm8_expander device
 */
#define io_set_adc_4_cfg_treshold(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mAdc4Cfg, IO_ADC_4_CFG_TRESHOLD_FIELD_MASK , (val) )
/**
 * @brief writes the IRQ field to the ADC_4_CFG register 
 * @param dev ptr to stm8_expander device
 * @option IO_ADC_4_CFG_IRQ_NONE No interrupt
 * @option IO_ADC_4_CFG_IRQ_RISING Trigger on Rising
 * @option IO_ADC_4_CFG_IRQ_FALLING Trigger on falling
 * @option IO_ADC_4_CFG_IRQ_ANY Trigger on any
 */
#define io_set_adc_4_cfg_irq(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mAdc4Cfg, IO_ADC_4_CFG_IRQ_FIELD_MASK , (val) )
/**
 * @brief writes the Period field to the PWM_CONFIG register 
 * @param dev ptr to stm8_expander device
 */
#define io_set_pwm_config_period(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mPwmConfig, IO_PWM_CONFIG_PERIOD_FIELD_MASK , (val) )
/**
 * @brief writes the Prescaler field to the PWM_CONFIG register 
 * @param dev ptr to stm8_expander device
 * @option IO_PWM_CONFIG_PRESCALER_PRESCALER_1 divide clock by 1 (16Mhz)
 * @option IO_PWM_CONFIG_PRESCALER_PRESCALER_2 divide clock by 2 (8Mhz)
 * @option IO_PWM_CONFIG_PRESCALER_PRESCALER_4 divide clock by 4  (4Mhz)
 * @option IO_PWM_CONFIG_PRESCALER_PRESCALER_8 divide clock by 8  (2Mhz)
 * @option IO_PWM_CONFIG_PRESCALER_PRESCALER_16 divide clock by 16  (1Mhz)
 * @option IO_PWM_CONFIG_PRESCALER_PRESCALER_32 divide clock by 32  (500Khz)
 * @option IO_PWM_CONFIG_PRESCALER_PRESCALER_64 divide clock by 64  (250Khz)
 * @option IO_PWM_CONFIG_PRESCALER_PRESCALER_128 divide clock by 128 (125Khz)
 * @option IO_PWM_CONFIG_PRESCALER_PRESCALER_256 divide clock by 256 (62.5 Khz)
 * @option IO_PWM_CONFIG_PRESCALER_PRESCALER_512 divide clock by 512  (31.25 Khz)
 * @option IO_PWM_CONFIG_PRESCALER_PRESCALER_1024 divide clock by 1024 (1.5625 KHz)
 * @option IO_PWM_CONFIG_PRESCALER_PRESCALER_2048 divide clock by 2048  ()
 * @option IO_PWM_CONFIG_PRESCALER_PRESCALER_4096 divide clock by 4096  ()
 * @option IO_PWM_CONFIG_PRESCALER_PRESCALER_8192 divide clock by 8192  ()
 * @option IO_PWM_CONFIG_PRESCALER_PRESCALER_16384 divide clock by 16384 ()
 * @option IO_PWM_CONFIG_PRESCALER_PRESCALER_32768 divide clock by 32768 ()
 */
#define io_set_pwm_config_prescaler(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mPwmConfig, IO_PWM_CONFIG_PRESCALER_FIELD_MASK , (val) )
/**
 * @brief writes the WHO_AM_I field to the WHO_AM_I register 
 * @param dev ptr to stm8_expander device
 */
#define io_set_who_am_i(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mWhoAmI, IO_WHO_AM_I_WHO_AM_I_FIELD_MASK , (val) )

/*******************************************************************************
  Configs                                                                            
*******************************************************************************/

