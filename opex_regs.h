/**
  * @file opex_regs.h
  * @author generated by mrt-device utility 
  * @link [https://github.com/uprev-mrt/mrtutils/wiki/mrt-device]
  * @brief values and constants for the opex device registers
  * 
  */

#define OPEX_I2C_ADDRESS 0x42
#define OPEX_REG_ADDR_SIZE 1
#define OPEX_REG_COUNT 51


/*******************************************************************************
  Register Addresses                                                                              
*******************************************************************************/

#define IO_REG_GPIO_IN_ADDR                                        0x00 /* Input values for gpio 0-25 */
#define IO_REG_GPIO_OUT_ADDR                                       0x04 /* Output values for gpio 0-15 */
#define IO_REG_GPIO_DDR_ADDR                                       0x08 /* Direction Register for GPIO */
#define IO_REG_IRQ_SRC_ADDR                                        0x0C /* latching Interrupt source mask. indicates souce of IRQ resets on read */
#define IO_REG_ADC_0_VAL_ADDR                                      0x10 /* Output of ADC 0 */
#define IO_REG_ADC_1_VAL_ADDR                                      0x12 /* Output of ADC 1 */
#define IO_REG_ADC_2_VAL_ADDR                                      0x14 /* Output of ADC 2 */
#define IO_REG_ADC_3_VAL_ADDR                                      0x16 /* Output of ADC 3 */
#define IO_REG_ADC_4_VAL_ADDR                                      0x18 /* Output of ADC 4 */
#define IO_REG_PWM_0_VAL_ADDR                                      0x1A /* PWM value for ch 0 */
#define IO_REG_PWM_1_VAL_ADDR                                      0x1C /* PWM value for ch 1 */
#define IO_REG_PWM_2_VAL_ADDR                                      0x1E /* PWM value for ch 2 */
#define IO_REG_PWM_3_VAL_ADDR                                      0x20 /* PWM value for ch 3 */
#define IO_REG_PWM_4_VAL_ADDR                                      0x22 /* PWM value for ch 4 */
#define IO_REG_PWM_5_VAL_ADDR                                      0x24 /* PWM value for ch 5 */
#define IO_REG_GPIO_0_CFG_ADDR                                     0x26 /* Configuration for GPIO 0 */
#define IO_REG_GPIO_1_CFG_ADDR                                     0x27 /* Configuration for GPIO 1 */
#define IO_REG_GPIO_2_CFG_ADDR                                     0x28 /* Configuration for GPIO 2 */
#define IO_REG_GPIO_3_CFG_ADDR                                     0x29 /* Configuration for GPIO 3 */
#define IO_REG_GPIO_4_CFG_ADDR                                     0x2A /* Configuration for GPIO 4 */
#define IO_REG_GPIO_5_CFG_ADDR                                     0x2B /* Configuration for GPIO 5 */
#define IO_REG_GPIO_6_CFG_ADDR                                     0x2C /* Configuration for GPIO 6 */
#define IO_REG_GPIO_7_CFG_ADDR                                     0x2D /* Configuration for GPIO 7 */
#define IO_REG_GPIO_8_CFG_ADDR                                     0x2E /* Configuration for GPIO 8 */
#define IO_REG_GPIO_9_CFG_ADDR                                     0x2F /* Configuration for GPIO 9 */
#define IO_REG_GPIO_10_CFG_ADDR                                    0x30 /* Configuration for GPIO 10 */
#define IO_REG_GPIO_11_CFG_ADDR                                    0x31 /* Configuration for GPIO 11 */
#define IO_REG_GPIO_12_CFG_ADDR                                    0x32 /* Configuration for GPIO 12 */
#define IO_REG_GPIO_13_CFG_ADDR                                    0x33 /* Configuration for GPIO 13 */
#define IO_REG_GPIO_14_CFG_ADDR                                    0x34 /* Configuration for GPIO 14 */
#define IO_REG_GPIO_15_CFG_ADDR                                    0x35 /* Configuration for GPIO 15 */
#define IO_REG_GPIO_16_CFG_ADDR                                    0x36 /* Configuration for GPIO 16 */
#define IO_REG_GPIO_17_CFG_ADDR                                    0x37 /* Configuration for GPIO 17 */
#define IO_REG_GPIO_18_CFG_ADDR                                    0x38 /* Configuration for GPIO 18 */
#define IO_REG_GPIO_19_CFG_ADDR                                    0x39 /* Configuration for GPIO 19 */
#define IO_REG_GPIO_20_CFG_ADDR                                    0x3A /* Configuration for GPIO 20 */
#define IO_REG_GPIO_21_CFG_ADDR                                    0x3B /* Configuration for GPIO 21 */
#define IO_REG_GPIO_22_CFG_ADDR                                    0x3C /* Configuration for GPIO 22 */
#define IO_REG_GPIO_23_CFG_ADDR                                    0x3D /* Configuration for GPIO 23 */
#define IO_REG_GPIO_24_CFG_ADDR                                    0x3E /* Configuration for GPIO 24 */
#define IO_REG_GPIO_25_CFG_ADDR                                    0x3F /* Configuration for GPIO 25 */
#define IO_REG_IRQ_CFG_ADDR                                        0x40 /* IRQ Configuration */
#define IO_REG_ADC_0_CFG_ADDR                                      0x42 /* Configuration for ADC 0 */
#define IO_REG_ADC_1_CFG_ADDR                                      0x44 /* Configuration for ADC 1 */
#define IO_REG_ADC_2_CFG_ADDR                                      0x46 /* Configuration for ADC 2 */
#define IO_REG_ADC_3_CFG_ADDR                                      0x48 /* Configuration for ADC 3 */
#define IO_REG_ADC_4_CFG_ADDR                                      0x4A /* Configuration for ADC 4 */
#define IO_REG_PWM_CONFIG_ADDR                                     0x4C /* Configuration for PWM */
#define IO_REG_WHO_AM_I_ADDR                                       0x50 /* Device ID */
#define IO_REG_VERSION_ADDR                                        0x51 /* Version of firmware */
#define IO_REG_EEPROM_MEM_ADDR                                     0x70 /* Start address of EEPROM memory on stm8. User can read/write up to 128 bytes starting at this address */


/*******************************************************************************
  Fields                                                                              
*******************************************************************************/

/* IRQ_SRC Register Fields */
    /* IRQ_SRC -> IRQ_SRC */
    #define IO_IRQ_SRC_IRQ_SRC_FIELD_MASK                          0xFFFFFFFF /* Source of IRQ */
    #define IO_IRQ_SRC_IRQ_SRC_FIELD_OFFSET                        0x00000000
      #define IO_IRQ_SRC_IRQ_SRC_GPIO_0                            0x00000001 /* IRQ triggered by GPIO0 */
      #define IO_IRQ_SRC_IRQ_SRC_ADC_0                             0x04000000 /* IRQ triggered by ADC0 */
      #define IO_IRQ_SRC_IRQ_SRC_ADC_1                             0x08000000 /* IRQ triggered by ADC1 */
      #define IO_IRQ_SRC_IRQ_SRC_ADC_2                             0x10000000 /* IRQ triggered by ADC2 */
      #define IO_IRQ_SRC_IRQ_SRC_ADC_3                             0x20000000 /* IRQ triggered by ADC3 */
      #define IO_IRQ_SRC_IRQ_SRC_ADC_4                             0x40000000 /* IRQ triggered by ADC4 */
/* GPIO_0_CFG Register Fields */
    /* GPIO_0_CFG -> Flags */
    #define IO_GPIO_X_CFG_PP                                       0x40 /* Enables Push/Pull on output, and Pull-up on input */
    #define IO_GPIO_X_CFG_ALT                                      0x02 /* Indicates that GPIO is disabled because pin is being used for an alternate function (PWM, ADC, etc) */
    #define IO_GPIO_X_CFG_EN                                       0x01 /* Enables GPIO */
    /* GPIO_0_CFG -> DIR */
    #define IO_GPIO_X_CFG_DIR_FIELD_MASK                           0x80 /* Pin Direction */
    #define IO_GPIO_X_CFG_DIR_FIELD_OFFSET                         0x07
      #define IO_GPIO_X_CFG_DIR_IN                                 0x00 /* GPIO is an input */
      #define IO_GPIO_X_CFG_DIR_OUT                                0x01 /* GPIO is an output */
    /* GPIO_0_CFG -> LL */
    #define IO_GPIO_X_CFG_LL_FIELD_MASK                            0x10 /* Low Level */
    #define IO_GPIO_X_CFG_LL_FIELD_OFFSET                          0x04
      #define IO_GPIO_X_CFG_LL_LOW                                 0x00 /* Low level output */
      #define IO_GPIO_X_CFG_LL_HIGH                                0x01 /*  */
    /* GPIO_0_CFG -> IRQ */
    #define IO_GPIO_X_CFG_IRQ_FIELD_MASK                           0x0C /* Interrupt selection */
    #define IO_GPIO_X_CFG_IRQ_FIELD_OFFSET                         0x02
      #define IO_GPIO_X_CFG_IRQ_NONE                               0x00 /* No interrupt */
      #define IO_GPIO_X_CFG_IRQ_RISING                             0x01 /* Trigger on Rising */
      #define IO_GPIO_X_CFG_IRQ_FALLING                            0x02 /* Trigger on falling */
      #define IO_GPIO_X_CFG_IRQ_ANY                                0x03 /* Trigger on any */
/* IRQ_CFG Register Fields */
    /* IRQ_CFG -> Flags */
    #define IO_IRQ_CFG_ENABLED                                     0x8000 /* Enables IRQ signal on selected GPIO */
    /* IRQ_CFG -> Polarity */
    #define IO_IRQ_CFG_POLARITY_FIELD_MASK                         0x4000 /* Sets polarity of IRQ */
    #define IO_IRQ_CFG_POLARITY_FIELD_OFFSET                       0x000E
      #define IO_IRQ_CFG_POLARITY_ACTIVE_HIGH                      0x0001 /* GPIO is high when IRQ is pending */
      #define IO_IRQ_CFG_POLARITY_ACTIVE_LOW                       0x0000 /* GPIO is low when IRQ is pending */
    /* IRQ_CFG -> Output */
    #define IO_IRQ_CFG_OUTPUT_FIELD_MASK                           0x001F /* Selects the GPIO to use for IRQ */
    #define IO_IRQ_CFG_OUTPUT_FIELD_OFFSET                         0x0000
/* ADC_0_CFG Register Fields */
    /* ADC_0_CFG -> Flags */
    #define IO_ADC_X_CFG_EN                                        0x0001 /* Enables ADC Channel */
    /* ADC_0_CFG -> Treshold */
    #define IO_ADC_X_CFG_TRESHOLD_FIELD_MASK                       0xFFF0 /* IRQ threshold for ADC channel */
    #define IO_ADC_X_CFG_TRESHOLD_FIELD_OFFSET                     0x0004
    /* ADC_0_CFG -> IRQ */
    #define IO_ADC_X_CFG_IRQ_FIELD_MASK                            0x000C /* Interrupt setting for ADC channel */
    #define IO_ADC_X_CFG_IRQ_FIELD_OFFSET                          0x0002
      #define IO_ADC_X_CFG_IRQ_NONE                                0x0000 /* No interrupt */
      #define IO_ADC_X_CFG_IRQ_RISING                              0x0001 /* Trigger on Rising */
      #define IO_ADC_X_CFG_IRQ_FALLING                             0x0002 /* Trigger on falling */
      #define IO_ADC_X_CFG_IRQ_ANY                                 0x0003 /* Trigger on any */
/* PWM_CONFIG Register Fields */
    /* PWM_CONFIG -> Flags */
    #define IO_PWM_CONFIG_CH0_ENABLE                               0x00000001 /* Enables PWM channel 0 */
    #define IO_PWM_CONFIG_CH1_ENABLE                               0x00000002 /* Enables PWM channel 1 */
    #define IO_PWM_CONFIG_CH2_ENABLE                               0x00000004 /* Enables PWM channel 2 */
    #define IO_PWM_CONFIG_CH3_ENABLE                               0x00000008 /* Enables PWM channel 3 */
    #define IO_PWM_CONFIG_CH4_ENABLE                               0x00000010 /* Enables PWM channel 4 */
    #define IO_PWM_CONFIG_CH5_ENABLE                               0x00000020 /* Enables PWM channel 5 */
    #define IO_PWM_CONFIG_CH6_ENABLE                               0x00000040 /* Enables PWM channel 6 */
    #define IO_PWM_CONFIG_CH7_ENABLE                               0x00000080 /* Enables PWM channel 7 */
    /* PWM_CONFIG -> Period */
    #define IO_PWM_CONFIG_PERIOD_FIELD_MASK                        0xFFFF0000 /* Period for PWM signals */
    #define IO_PWM_CONFIG_PERIOD_FIELD_OFFSET                      0x00000010
    /* PWM_CONFIG -> Prescaler */
    #define IO_PWM_CONFIG_PRESCALER_FIELD_MASK                     0x0000F000 /* Prescaler for PWM, using 16Mhz clock */
    #define IO_PWM_CONFIG_PRESCALER_FIELD_OFFSET                   0x0000000C
      #define IO_PWM_CONFIG_PRESCALER_PRESCALER_1                  0x00000000 /* divide clock by 1 (16Mhz) */
      #define IO_PWM_CONFIG_PRESCALER_PRESCALER_2                  0x00000001 /* divide clock by 2 (8Mhz) */
      #define IO_PWM_CONFIG_PRESCALER_PRESCALER_4                  0x00000002 /* divide clock by 4  (4Mhz) */
      #define IO_PWM_CONFIG_PRESCALER_PRESCALER_8                  0x00000003 /* divide clock by 8  (2Mhz) */
      #define IO_PWM_CONFIG_PRESCALER_PRESCALER_16                 0x00000004 /* divide clock by 16  (1Mhz) */
      #define IO_PWM_CONFIG_PRESCALER_PRESCALER_32                 0x00000005 /* divide clock by 32  (500Khz) */
      #define IO_PWM_CONFIG_PRESCALER_PRESCALER_64                 0x00000006 /* divide clock by 64  (250Khz) */
      #define IO_PWM_CONFIG_PRESCALER_PRESCALER_128                0x00000007 /* divide clock by 128 (125Khz) */
      #define IO_PWM_CONFIG_PRESCALER_PRESCALER_256                0x00000008 /* divide clock by 256 (62.5 Khz) */
      #define IO_PWM_CONFIG_PRESCALER_PRESCALER_512                0x00000009 /* divide clock by 512  (31.25 Khz) */
      #define IO_PWM_CONFIG_PRESCALER_PRESCALER_1024               0x0000000A /* divide clock by 1024 (1.5625 KHz) */
      #define IO_PWM_CONFIG_PRESCALER_PRESCALER_2048               0x0000000B /* divide clock by 2048  () */
      #define IO_PWM_CONFIG_PRESCALER_PRESCALER_4096               0x0000000C /* divide clock by 4096  () */
      #define IO_PWM_CONFIG_PRESCALER_PRESCALER_8192               0x0000000D /* divide clock by 8192  () */
      #define IO_PWM_CONFIG_PRESCALER_PRESCALER_16384              0x0000000E /* divide clock by 16384 () */
      #define IO_PWM_CONFIG_PRESCALER_PRESCALER_32768              0x0000000F /* divide clock by 32768 () */
/* WHO_AM_I Register Fields */
    /* WHO_AM_I -> ID */
    #define IO_WHO_AM_I_ID_FIELD_MASK                              0xFFFFFFFF /* ID of device */
    #define IO_WHO_AM_I_ID_FIELD_OFFSET                            0x00
      #define IO_WHO_AM_I_ID_STM8S003F3                            0x70 /* 20 pin variant */
      #define IO_WHO_AM_I_ID_STM8S003K3                            0x71 /* 32 pin variant */
/* VERSION Register Fields */
    /* VERSION -> MAJOR */
    #define IO_VERSION_MAJOR_FIELD_MASK                            0xFF000000 /* Major Version */
    #define IO_VERSION_MAJOR_FIELD_OFFSET                          0x00000018
    /* VERSION -> MINOR */
    #define IO_VERSION_MINOR_FIELD_MASK                            0x00FF0000 /* Major Version */
    #define IO_VERSION_MINOR_FIELD_OFFSET                          0x00000010
    /* VERSION -> PATCH */
    #define IO_VERSION_PATCH_FIELD_MASK                            0x0000FF00 /* Major Version */
    #define IO_VERSION_PATCH_FIELD_OFFSET                          0x00000008
    /* VERSION -> BUILD */
    #define IO_VERSION_BUILD_FIELD_MASK                            0x000000FF /* Major Version */
    #define IO_VERSION_BUILD_FIELD_OFFSET                          0x00000000

/*******************************************************************************
  Default Values                                                                              
*******************************************************************************/

#define IO_WHO_AM_I_DEFAULT                                        0xAB




/*******************************************************************************
  Flag Set/Clear/Check                                                                             
*******************************************************************************/

/**
  *@brief sets flags on device
  *@param dev ptr to opex device
  *@param reg ptr to register definition
  *@param mask mask of flags to set
  */
#define io_set_flag(dev, reg, mask) regdev_set_flags(&(dev)->mRegDev,(reg), (mask))

/**
  *@brief clears flags on device
  *@param dev ptr to opex device
  *@param reg ptr to register definition
  *@param mask mask of flags to set
  */
#define io_clear_flag(dev, reg, mask) regdev_clear_flags(&(dev)->mRegDev,(reg), (mask))

/**
  *@brief checks flags on device
  *@param dev ptr to opex device
  *@param reg ptr to register definition
  *@param mask mask of flags to set
  *@return true if all flags in mask are set 
  *@return false if any flags in mask are not set
  */
#define io_check_flag(dev, reg, mask) regdev_check_flags(&(dev)->mRegDev,(reg), (mask))

/*******************************************************************************
  Field Getters                                                                              
*******************************************************************************/

/**
 * @brief reads the IRQ_SRC field from the IRQ_SRC register 
 * @param dev ptr to opex device
 * @return IO_IRQ_SRC_IRQ_SRC_GPIO_0 IRQ triggered by GPIO0
 * @return IO_IRQ_SRC_IRQ_SRC_ADC_0 IRQ triggered by ADC0
 * @return IO_IRQ_SRC_IRQ_SRC_ADC_1 IRQ triggered by ADC1
 * @return IO_IRQ_SRC_IRQ_SRC_ADC_2 IRQ triggered by ADC2
 * @return IO_IRQ_SRC_IRQ_SRC_ADC_3 IRQ triggered by ADC3
 * @return IO_IRQ_SRC_IRQ_SRC_ADC_4 IRQ triggered by ADC4
 */
#define io_get_irq_src_irq_src(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mIrqSrc, IO_IRQ_SRC_IRQ_SRC_FIELD_MASK )
/**
 * @brief reads the DIR field from the GPIO_0_CFG register 
 * @param dev ptr to opex device
 * @return IO_GPIO_0_CFG_DIR_IN GPIO is an input
 * @return IO_GPIO_0_CFG_DIR_OUT GPIO is an output
 */
#define io_get_gpio_0_cfg_dir(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mGpio0Cfg, IO_GPIO_X_CFG_DIR_FIELD_MASK )
/**
 * @brief reads the LL field from the GPIO_0_CFG register 
 * @param dev ptr to opex device
 * @return IO_GPIO_0_CFG_LL_LOW Low level output
 * @return IO_GPIO_0_CFG_LL_HIGH 
 */
#define io_get_gpio_0_cfg_ll(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mGpio0Cfg, IO_GPIO_X_CFG_LL_FIELD_MASK )
/**
 * @brief reads the IRQ field from the GPIO_0_CFG register 
 * @param dev ptr to opex device
 * @return IO_GPIO_0_CFG_IRQ_NONE No interrupt
 * @return IO_GPIO_0_CFG_IRQ_RISING Trigger on Rising
 * @return IO_GPIO_0_CFG_IRQ_FALLING Trigger on falling
 * @return IO_GPIO_0_CFG_IRQ_ANY Trigger on any
 */
#define io_get_gpio_0_cfg_irq(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mGpio0Cfg, IO_GPIO_X_CFG_IRQ_FIELD_MASK )
/**
 * @brief reads the DIR field from the GPIO_1_CFG register 
 * @param dev ptr to opex device
 * @return IO_GPIO_1_CFG_DIR_IN GPIO is an input
 * @return IO_GPIO_1_CFG_DIR_OUT GPIO is an output
 */
#define io_get_gpio_1_cfg_dir(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mGpio1Cfg, IO_GPIO_X_CFG_DIR_FIELD_MASK )
/**
 * @brief reads the LL field from the GPIO_1_CFG register 
 * @param dev ptr to opex device
 * @return IO_GPIO_1_CFG_LL_LOW Low level output
 * @return IO_GPIO_1_CFG_LL_HIGH 
 */
#define io_get_gpio_1_cfg_ll(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mGpio1Cfg, IO_GPIO_X_CFG_LL_FIELD_MASK )
/**
 * @brief reads the IRQ field from the GPIO_1_CFG register 
 * @param dev ptr to opex device
 * @return IO_GPIO_1_CFG_IRQ_NONE No interrupt
 * @return IO_GPIO_1_CFG_IRQ_RISING Trigger on Rising
 * @return IO_GPIO_1_CFG_IRQ_FALLING Trigger on falling
 * @return IO_GPIO_1_CFG_IRQ_ANY Trigger on any
 */
#define io_get_gpio_1_cfg_irq(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mGpio1Cfg, IO_GPIO_X_CFG_IRQ_FIELD_MASK )
/**
 * @brief reads the DIR field from the GPIO_2_CFG register 
 * @param dev ptr to opex device
 * @return IO_GPIO_2_CFG_DIR_IN GPIO is an input
 * @return IO_GPIO_2_CFG_DIR_OUT GPIO is an output
 */
#define io_get_gpio_2_cfg_dir(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mGpio2Cfg, IO_GPIO_X_CFG_DIR_FIELD_MASK )
/**
 * @brief reads the LL field from the GPIO_2_CFG register 
 * @param dev ptr to opex device
 * @return IO_GPIO_2_CFG_LL_LOW Low level output
 * @return IO_GPIO_2_CFG_LL_HIGH 
 */
#define io_get_gpio_2_cfg_ll(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mGpio2Cfg, IO_GPIO_X_CFG_LL_FIELD_MASK )
/**
 * @brief reads the IRQ field from the GPIO_2_CFG register 
 * @param dev ptr to opex device
 * @return IO_GPIO_2_CFG_IRQ_NONE No interrupt
 * @return IO_GPIO_2_CFG_IRQ_RISING Trigger on Rising
 * @return IO_GPIO_2_CFG_IRQ_FALLING Trigger on falling
 * @return IO_GPIO_2_CFG_IRQ_ANY Trigger on any
 */
#define io_get_gpio_2_cfg_irq(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mGpio2Cfg, IO_GPIO_X_CFG_IRQ_FIELD_MASK )
/**
 * @brief reads the DIR field from the GPIO_3_CFG register 
 * @param dev ptr to opex device
 * @return IO_GPIO_3_CFG_DIR_IN GPIO is an input
 * @return IO_GPIO_3_CFG_DIR_OUT GPIO is an output
 */
#define io_get_gpio_3_cfg_dir(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mGpio3Cfg, IO_GPIO_X_CFG_DIR_FIELD_MASK )
/**
 * @brief reads the LL field from the GPIO_3_CFG register 
 * @param dev ptr to opex device
 * @return IO_GPIO_3_CFG_LL_LOW Low level output
 * @return IO_GPIO_3_CFG_LL_HIGH 
 */
#define io_get_gpio_3_cfg_ll(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mGpio3Cfg, IO_GPIO_X_CFG_LL_FIELD_MASK )
/**
 * @brief reads the IRQ field from the GPIO_3_CFG register 
 * @param dev ptr to opex device
 * @return IO_GPIO_3_CFG_IRQ_NONE No interrupt
 * @return IO_GPIO_3_CFG_IRQ_RISING Trigger on Rising
 * @return IO_GPIO_3_CFG_IRQ_FALLING Trigger on falling
 * @return IO_GPIO_3_CFG_IRQ_ANY Trigger on any
 */
#define io_get_gpio_3_cfg_irq(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mGpio3Cfg, IO_GPIO_X_CFG_IRQ_FIELD_MASK )
/**
 * @brief reads the DIR field from the GPIO_4_CFG register 
 * @param dev ptr to opex device
 * @return IO_GPIO_4_CFG_DIR_IN GPIO is an input
 * @return IO_GPIO_4_CFG_DIR_OUT GPIO is an output
 */
#define io_get_gpio_4_cfg_dir(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mGpio4Cfg, IO_GPIO_X_CFG_DIR_FIELD_MASK )
/**
 * @brief reads the LL field from the GPIO_4_CFG register 
 * @param dev ptr to opex device
 * @return IO_GPIO_4_CFG_LL_LOW Low level output
 * @return IO_GPIO_4_CFG_LL_HIGH 
 */
#define io_get_gpio_4_cfg_ll(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mGpio4Cfg, IO_GPIO_X_CFG_LL_FIELD_MASK )
/**
 * @brief reads the IRQ field from the GPIO_4_CFG register 
 * @param dev ptr to opex device
 * @return IO_GPIO_4_CFG_IRQ_NONE No interrupt
 * @return IO_GPIO_4_CFG_IRQ_RISING Trigger on Rising
 * @return IO_GPIO_4_CFG_IRQ_FALLING Trigger on falling
 * @return IO_GPIO_4_CFG_IRQ_ANY Trigger on any
 */
#define io_get_gpio_4_cfg_irq(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mGpio4Cfg, IO_GPIO_X_CFG_IRQ_FIELD_MASK )
/**
 * @brief reads the DIR field from the GPIO_5_CFG register 
 * @param dev ptr to opex device
 * @return IO_GPIO_5_CFG_DIR_IN GPIO is an input
 * @return IO_GPIO_5_CFG_DIR_OUT GPIO is an output
 */
#define io_get_gpio_5_cfg_dir(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mGpio5Cfg, IO_GPIO_X_CFG_DIR_FIELD_MASK )
/**
 * @brief reads the LL field from the GPIO_5_CFG register 
 * @param dev ptr to opex device
 * @return IO_GPIO_5_CFG_LL_LOW Low level output
 * @return IO_GPIO_5_CFG_LL_HIGH 
 */
#define io_get_gpio_5_cfg_ll(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mGpio5Cfg, IO_GPIO_X_CFG_LL_FIELD_MASK )
/**
 * @brief reads the IRQ field from the GPIO_5_CFG register 
 * @param dev ptr to opex device
 * @return IO_GPIO_5_CFG_IRQ_NONE No interrupt
 * @return IO_GPIO_5_CFG_IRQ_RISING Trigger on Rising
 * @return IO_GPIO_5_CFG_IRQ_FALLING Trigger on falling
 * @return IO_GPIO_5_CFG_IRQ_ANY Trigger on any
 */
#define io_get_gpio_5_cfg_irq(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mGpio5Cfg, IO_GPIO_X_CFG_IRQ_FIELD_MASK )
/**
 * @brief reads the DIR field from the GPIO_6_CFG register 
 * @param dev ptr to opex device
 * @return IO_GPIO_6_CFG_DIR_IN GPIO is an input
 * @return IO_GPIO_6_CFG_DIR_OUT GPIO is an output
 */
#define io_get_gpio_6_cfg_dir(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mGpio6Cfg, IO_GPIO_X_CFG_DIR_FIELD_MASK )
/**
 * @brief reads the LL field from the GPIO_6_CFG register 
 * @param dev ptr to opex device
 * @return IO_GPIO_6_CFG_LL_LOW Low level output
 * @return IO_GPIO_6_CFG_LL_HIGH 
 */
#define io_get_gpio_6_cfg_ll(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mGpio6Cfg, IO_GPIO_X_CFG_LL_FIELD_MASK )
/**
 * @brief reads the IRQ field from the GPIO_6_CFG register 
 * @param dev ptr to opex device
 * @return IO_GPIO_6_CFG_IRQ_NONE No interrupt
 * @return IO_GPIO_6_CFG_IRQ_RISING Trigger on Rising
 * @return IO_GPIO_6_CFG_IRQ_FALLING Trigger on falling
 * @return IO_GPIO_6_CFG_IRQ_ANY Trigger on any
 */
#define io_get_gpio_6_cfg_irq(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mGpio6Cfg, IO_GPIO_X_CFG_IRQ_FIELD_MASK )
/**
 * @brief reads the DIR field from the GPIO_7_CFG register 
 * @param dev ptr to opex device
 * @return IO_GPIO_7_CFG_DIR_IN GPIO is an input
 * @return IO_GPIO_7_CFG_DIR_OUT GPIO is an output
 */
#define io_get_gpio_7_cfg_dir(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mGpio7Cfg, IO_GPIO_X_CFG_DIR_FIELD_MASK )
/**
 * @brief reads the LL field from the GPIO_7_CFG register 
 * @param dev ptr to opex device
 * @return IO_GPIO_7_CFG_LL_LOW Low level output
 * @return IO_GPIO_7_CFG_LL_HIGH 
 */
#define io_get_gpio_7_cfg_ll(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mGpio7Cfg, IO_GPIO_X_CFG_LL_FIELD_MASK )
/**
 * @brief reads the IRQ field from the GPIO_7_CFG register 
 * @param dev ptr to opex device
 * @return IO_GPIO_7_CFG_IRQ_NONE No interrupt
 * @return IO_GPIO_7_CFG_IRQ_RISING Trigger on Rising
 * @return IO_GPIO_7_CFG_IRQ_FALLING Trigger on falling
 * @return IO_GPIO_7_CFG_IRQ_ANY Trigger on any
 */
#define io_get_gpio_7_cfg_irq(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mGpio7Cfg, IO_GPIO_X_CFG_IRQ_FIELD_MASK )
/**
 * @brief reads the DIR field from the GPIO_8_CFG register 
 * @param dev ptr to opex device
 * @return IO_GPIO_8_CFG_DIR_IN GPIO is an input
 * @return IO_GPIO_8_CFG_DIR_OUT GPIO is an output
 */
#define io_get_gpio_8_cfg_dir(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mGpio8Cfg, IO_GPIO_X_CFG_DIR_FIELD_MASK )
/**
 * @brief reads the LL field from the GPIO_8_CFG register 
 * @param dev ptr to opex device
 * @return IO_GPIO_8_CFG_LL_LOW Low level output
 * @return IO_GPIO_8_CFG_LL_HIGH 
 */
#define io_get_gpio_8_cfg_ll(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mGpio8Cfg, IO_GPIO_X_CFG_LL_FIELD_MASK )
/**
 * @brief reads the IRQ field from the GPIO_8_CFG register 
 * @param dev ptr to opex device
 * @return IO_GPIO_8_CFG_IRQ_NONE No interrupt
 * @return IO_GPIO_8_CFG_IRQ_RISING Trigger on Rising
 * @return IO_GPIO_8_CFG_IRQ_FALLING Trigger on falling
 * @return IO_GPIO_8_CFG_IRQ_ANY Trigger on any
 */
#define io_get_gpio_8_cfg_irq(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mGpio8Cfg, IO_GPIO_X_CFG_IRQ_FIELD_MASK )
/**
 * @brief reads the DIR field from the GPIO_9_CFG register 
 * @param dev ptr to opex device
 * @return IO_GPIO_9_CFG_DIR_IN GPIO is an input
 * @return IO_GPIO_9_CFG_DIR_OUT GPIO is an output
 */
#define io_get_gpio_9_cfg_dir(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mGpio9Cfg, IO_GPIO_X_CFG_DIR_FIELD_MASK )
/**
 * @brief reads the LL field from the GPIO_9_CFG register 
 * @param dev ptr to opex device
 * @return IO_GPIO_9_CFG_LL_LOW Low level output
 * @return IO_GPIO_9_CFG_LL_HIGH 
 */
#define io_get_gpio_9_cfg_ll(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mGpio9Cfg, IO_GPIO_X_CFG_LL_FIELD_MASK )
/**
 * @brief reads the IRQ field from the GPIO_9_CFG register 
 * @param dev ptr to opex device
 * @return IO_GPIO_9_CFG_IRQ_NONE No interrupt
 * @return IO_GPIO_9_CFG_IRQ_RISING Trigger on Rising
 * @return IO_GPIO_9_CFG_IRQ_FALLING Trigger on falling
 * @return IO_GPIO_9_CFG_IRQ_ANY Trigger on any
 */
#define io_get_gpio_9_cfg_irq(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mGpio9Cfg, IO_GPIO_X_CFG_IRQ_FIELD_MASK )
/**
 * @brief reads the DIR field from the GPIO_10_CFG register 
 * @param dev ptr to opex device
 * @return IO_GPIO_10_CFG_DIR_IN GPIO is an input
 * @return IO_GPIO_10_CFG_DIR_OUT GPIO is an output
 */
#define io_get_gpio_10_cfg_dir(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mGpio10Cfg, IO_GPIO_X_CFG_DIR_FIELD_MASK )
/**
 * @brief reads the LL field from the GPIO_10_CFG register 
 * @param dev ptr to opex device
 * @return IO_GPIO_10_CFG_LL_LOW Low level output
 * @return IO_GPIO_10_CFG_LL_HIGH 
 */
#define io_get_gpio_10_cfg_ll(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mGpio10Cfg, IO_GPIO_X_CFG_LL_FIELD_MASK )
/**
 * @brief reads the IRQ field from the GPIO_10_CFG register 
 * @param dev ptr to opex device
 * @return IO_GPIO_10_CFG_IRQ_NONE No interrupt
 * @return IO_GPIO_10_CFG_IRQ_RISING Trigger on Rising
 * @return IO_GPIO_10_CFG_IRQ_FALLING Trigger on falling
 * @return IO_GPIO_10_CFG_IRQ_ANY Trigger on any
 */
#define io_get_gpio_10_cfg_irq(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mGpio10Cfg, IO_GPIO_X_CFG_IRQ_FIELD_MASK )
/**
 * @brief reads the DIR field from the GPIO_11_CFG register 
 * @param dev ptr to opex device
 * @return IO_GPIO_11_CFG_DIR_IN GPIO is an input
 * @return IO_GPIO_11_CFG_DIR_OUT GPIO is an output
 */
#define io_get_gpio_11_cfg_dir(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mGpio11Cfg, IO_GPIO_X_CFG_DIR_FIELD_MASK )
/**
 * @brief reads the LL field from the GPIO_11_CFG register 
 * @param dev ptr to opex device
 * @return IO_GPIO_11_CFG_LL_LOW Low level output
 * @return IO_GPIO_11_CFG_LL_HIGH 
 */
#define io_get_gpio_11_cfg_ll(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mGpio11Cfg, IO_GPIO_X_CFG_LL_FIELD_MASK )
/**
 * @brief reads the IRQ field from the GPIO_11_CFG register 
 * @param dev ptr to opex device
 * @return IO_GPIO_11_CFG_IRQ_NONE No interrupt
 * @return IO_GPIO_11_CFG_IRQ_RISING Trigger on Rising
 * @return IO_GPIO_11_CFG_IRQ_FALLING Trigger on falling
 * @return IO_GPIO_11_CFG_IRQ_ANY Trigger on any
 */
#define io_get_gpio_11_cfg_irq(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mGpio11Cfg, IO_GPIO_X_CFG_IRQ_FIELD_MASK )
/**
 * @brief reads the DIR field from the GPIO_12_CFG register 
 * @param dev ptr to opex device
 * @return IO_GPIO_12_CFG_DIR_IN GPIO is an input
 * @return IO_GPIO_12_CFG_DIR_OUT GPIO is an output
 */
#define io_get_gpio_12_cfg_dir(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mGpio12Cfg, IO_GPIO_X_CFG_DIR_FIELD_MASK )
/**
 * @brief reads the LL field from the GPIO_12_CFG register 
 * @param dev ptr to opex device
 * @return IO_GPIO_12_CFG_LL_LOW Low level output
 * @return IO_GPIO_12_CFG_LL_HIGH 
 */
#define io_get_gpio_12_cfg_ll(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mGpio12Cfg, IO_GPIO_X_CFG_LL_FIELD_MASK )
/**
 * @brief reads the IRQ field from the GPIO_12_CFG register 
 * @param dev ptr to opex device
 * @return IO_GPIO_12_CFG_IRQ_NONE No interrupt
 * @return IO_GPIO_12_CFG_IRQ_RISING Trigger on Rising
 * @return IO_GPIO_12_CFG_IRQ_FALLING Trigger on falling
 * @return IO_GPIO_12_CFG_IRQ_ANY Trigger on any
 */
#define io_get_gpio_12_cfg_irq(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mGpio12Cfg, IO_GPIO_X_CFG_IRQ_FIELD_MASK )
/**
 * @brief reads the DIR field from the GPIO_13_CFG register 
 * @param dev ptr to opex device
 * @return IO_GPIO_13_CFG_DIR_IN GPIO is an input
 * @return IO_GPIO_13_CFG_DIR_OUT GPIO is an output
 */
#define io_get_gpio_13_cfg_dir(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mGpio13Cfg, IO_GPIO_X_CFG_DIR_FIELD_MASK )
/**
 * @brief reads the LL field from the GPIO_13_CFG register 
 * @param dev ptr to opex device
 * @return IO_GPIO_13_CFG_LL_LOW Low level output
 * @return IO_GPIO_13_CFG_LL_HIGH 
 */
#define io_get_gpio_13_cfg_ll(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mGpio13Cfg, IO_GPIO_X_CFG_LL_FIELD_MASK )
/**
 * @brief reads the IRQ field from the GPIO_13_CFG register 
 * @param dev ptr to opex device
 * @return IO_GPIO_13_CFG_IRQ_NONE No interrupt
 * @return IO_GPIO_13_CFG_IRQ_RISING Trigger on Rising
 * @return IO_GPIO_13_CFG_IRQ_FALLING Trigger on falling
 * @return IO_GPIO_13_CFG_IRQ_ANY Trigger on any
 */
#define io_get_gpio_13_cfg_irq(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mGpio13Cfg, IO_GPIO_X_CFG_IRQ_FIELD_MASK )
/**
 * @brief reads the DIR field from the GPIO_14_CFG register 
 * @param dev ptr to opex device
 * @return IO_GPIO_14_CFG_DIR_IN GPIO is an input
 * @return IO_GPIO_14_CFG_DIR_OUT GPIO is an output
 */
#define io_get_gpio_14_cfg_dir(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mGpio14Cfg, IO_GPIO_X_CFG_DIR_FIELD_MASK )
/**
 * @brief reads the LL field from the GPIO_14_CFG register 
 * @param dev ptr to opex device
 * @return IO_GPIO_14_CFG_LL_LOW Low level output
 * @return IO_GPIO_14_CFG_LL_HIGH 
 */
#define io_get_gpio_14_cfg_ll(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mGpio14Cfg, IO_GPIO_X_CFG_LL_FIELD_MASK )
/**
 * @brief reads the IRQ field from the GPIO_14_CFG register 
 * @param dev ptr to opex device
 * @return IO_GPIO_14_CFG_IRQ_NONE No interrupt
 * @return IO_GPIO_14_CFG_IRQ_RISING Trigger on Rising
 * @return IO_GPIO_14_CFG_IRQ_FALLING Trigger on falling
 * @return IO_GPIO_14_CFG_IRQ_ANY Trigger on any
 */
#define io_get_gpio_14_cfg_irq(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mGpio14Cfg, IO_GPIO_X_CFG_IRQ_FIELD_MASK )
/**
 * @brief reads the DIR field from the GPIO_15_CFG register 
 * @param dev ptr to opex device
 * @return IO_GPIO_15_CFG_DIR_IN GPIO is an input
 * @return IO_GPIO_15_CFG_DIR_OUT GPIO is an output
 */
#define io_get_gpio_15_cfg_dir(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mGpio15Cfg, IO_GPIO_X_CFG_DIR_FIELD_MASK )
/**
 * @brief reads the LL field from the GPIO_15_CFG register 
 * @param dev ptr to opex device
 * @return IO_GPIO_15_CFG_LL_LOW Low level output
 * @return IO_GPIO_15_CFG_LL_HIGH 
 */
#define io_get_gpio_15_cfg_ll(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mGpio15Cfg, IO_GPIO_X_CFG_LL_FIELD_MASK )
/**
 * @brief reads the IRQ field from the GPIO_15_CFG register 
 * @param dev ptr to opex device
 * @return IO_GPIO_15_CFG_IRQ_NONE No interrupt
 * @return IO_GPIO_15_CFG_IRQ_RISING Trigger on Rising
 * @return IO_GPIO_15_CFG_IRQ_FALLING Trigger on falling
 * @return IO_GPIO_15_CFG_IRQ_ANY Trigger on any
 */
#define io_get_gpio_15_cfg_irq(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mGpio15Cfg, IO_GPIO_X_CFG_IRQ_FIELD_MASK )
/**
 * @brief reads the DIR field from the GPIO_16_CFG register 
 * @param dev ptr to opex device
 * @return IO_GPIO_16_CFG_DIR_IN GPIO is an input
 * @return IO_GPIO_16_CFG_DIR_OUT GPIO is an output
 */
#define io_get_gpio_16_cfg_dir(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mGpio16Cfg, IO_GPIO_X_CFG_DIR_FIELD_MASK )
/**
 * @brief reads the LL field from the GPIO_16_CFG register 
 * @param dev ptr to opex device
 * @return IO_GPIO_16_CFG_LL_LOW Low level output
 * @return IO_GPIO_16_CFG_LL_HIGH 
 */
#define io_get_gpio_16_cfg_ll(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mGpio16Cfg, IO_GPIO_X_CFG_LL_FIELD_MASK )
/**
 * @brief reads the IRQ field from the GPIO_16_CFG register 
 * @param dev ptr to opex device
 * @return IO_GPIO_16_CFG_IRQ_NONE No interrupt
 * @return IO_GPIO_16_CFG_IRQ_RISING Trigger on Rising
 * @return IO_GPIO_16_CFG_IRQ_FALLING Trigger on falling
 * @return IO_GPIO_16_CFG_IRQ_ANY Trigger on any
 */
#define io_get_gpio_16_cfg_irq(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mGpio16Cfg, IO_GPIO_X_CFG_IRQ_FIELD_MASK )
/**
 * @brief reads the DIR field from the GPIO_17_CFG register 
 * @param dev ptr to opex device
 * @return IO_GPIO_17_CFG_DIR_IN GPIO is an input
 * @return IO_GPIO_17_CFG_DIR_OUT GPIO is an output
 */
#define io_get_gpio_17_cfg_dir(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mGpio17Cfg, IO_GPIO_X_CFG_DIR_FIELD_MASK )
/**
 * @brief reads the LL field from the GPIO_17_CFG register 
 * @param dev ptr to opex device
 * @return IO_GPIO_17_CFG_LL_LOW Low level output
 * @return IO_GPIO_17_CFG_LL_HIGH 
 */
#define io_get_gpio_17_cfg_ll(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mGpio17Cfg, IO_GPIO_X_CFG_LL_FIELD_MASK )
/**
 * @brief reads the IRQ field from the GPIO_17_CFG register 
 * @param dev ptr to opex device
 * @return IO_GPIO_17_CFG_IRQ_NONE No interrupt
 * @return IO_GPIO_17_CFG_IRQ_RISING Trigger on Rising
 * @return IO_GPIO_17_CFG_IRQ_FALLING Trigger on falling
 * @return IO_GPIO_17_CFG_IRQ_ANY Trigger on any
 */
#define io_get_gpio_17_cfg_irq(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mGpio17Cfg, IO_GPIO_X_CFG_IRQ_FIELD_MASK )
/**
 * @brief reads the DIR field from the GPIO_18_CFG register 
 * @param dev ptr to opex device
 * @return IO_GPIO_18_CFG_DIR_IN GPIO is an input
 * @return IO_GPIO_18_CFG_DIR_OUT GPIO is an output
 */
#define io_get_gpio_18_cfg_dir(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mGpio18Cfg, IO_GPIO_X_CFG_DIR_FIELD_MASK )
/**
 * @brief reads the LL field from the GPIO_18_CFG register 
 * @param dev ptr to opex device
 * @return IO_GPIO_18_CFG_LL_LOW Low level output
 * @return IO_GPIO_18_CFG_LL_HIGH 
 */
#define io_get_gpio_18_cfg_ll(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mGpio18Cfg, IO_GPIO_X_CFG_LL_FIELD_MASK )
/**
 * @brief reads the IRQ field from the GPIO_18_CFG register 
 * @param dev ptr to opex device
 * @return IO_GPIO_18_CFG_IRQ_NONE No interrupt
 * @return IO_GPIO_18_CFG_IRQ_RISING Trigger on Rising
 * @return IO_GPIO_18_CFG_IRQ_FALLING Trigger on falling
 * @return IO_GPIO_18_CFG_IRQ_ANY Trigger on any
 */
#define io_get_gpio_18_cfg_irq(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mGpio18Cfg, IO_GPIO_X_CFG_IRQ_FIELD_MASK )
/**
 * @brief reads the DIR field from the GPIO_19_CFG register 
 * @param dev ptr to opex device
 * @return IO_GPIO_19_CFG_DIR_IN GPIO is an input
 * @return IO_GPIO_19_CFG_DIR_OUT GPIO is an output
 */
#define io_get_gpio_19_cfg_dir(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mGpio19Cfg, IO_GPIO_X_CFG_DIR_FIELD_MASK )
/**
 * @brief reads the LL field from the GPIO_19_CFG register 
 * @param dev ptr to opex device
 * @return IO_GPIO_19_CFG_LL_LOW Low level output
 * @return IO_GPIO_19_CFG_LL_HIGH 
 */
#define io_get_gpio_19_cfg_ll(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mGpio19Cfg, IO_GPIO_X_CFG_LL_FIELD_MASK )
/**
 * @brief reads the IRQ field from the GPIO_19_CFG register 
 * @param dev ptr to opex device
 * @return IO_GPIO_19_CFG_IRQ_NONE No interrupt
 * @return IO_GPIO_19_CFG_IRQ_RISING Trigger on Rising
 * @return IO_GPIO_19_CFG_IRQ_FALLING Trigger on falling
 * @return IO_GPIO_19_CFG_IRQ_ANY Trigger on any
 */
#define io_get_gpio_19_cfg_irq(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mGpio19Cfg, IO_GPIO_X_CFG_IRQ_FIELD_MASK )
/**
 * @brief reads the DIR field from the GPIO_20_CFG register 
 * @param dev ptr to opex device
 * @return IO_GPIO_20_CFG_DIR_IN GPIO is an input
 * @return IO_GPIO_20_CFG_DIR_OUT GPIO is an output
 */
#define io_get_gpio_20_cfg_dir(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mGpio20Cfg, IO_GPIO_X_CFG_DIR_FIELD_MASK )
/**
 * @brief reads the LL field from the GPIO_20_CFG register 
 * @param dev ptr to opex device
 * @return IO_GPIO_20_CFG_LL_LOW Low level output
 * @return IO_GPIO_20_CFG_LL_HIGH 
 */
#define io_get_gpio_20_cfg_ll(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mGpio20Cfg, IO_GPIO_X_CFG_LL_FIELD_MASK )
/**
 * @brief reads the IRQ field from the GPIO_20_CFG register 
 * @param dev ptr to opex device
 * @return IO_GPIO_20_CFG_IRQ_NONE No interrupt
 * @return IO_GPIO_20_CFG_IRQ_RISING Trigger on Rising
 * @return IO_GPIO_20_CFG_IRQ_FALLING Trigger on falling
 * @return IO_GPIO_20_CFG_IRQ_ANY Trigger on any
 */
#define io_get_gpio_20_cfg_irq(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mGpio20Cfg, IO_GPIO_X_CFG_IRQ_FIELD_MASK )
/**
 * @brief reads the DIR field from the GPIO_21_CFG register 
 * @param dev ptr to opex device
 * @return IO_GPIO_21_CFG_DIR_IN GPIO is an input
 * @return IO_GPIO_21_CFG_DIR_OUT GPIO is an output
 */
#define io_get_gpio_21_cfg_dir(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mGpio21Cfg, IO_GPIO_X_CFG_DIR_FIELD_MASK )
/**
 * @brief reads the LL field from the GPIO_21_CFG register 
 * @param dev ptr to opex device
 * @return IO_GPIO_21_CFG_LL_LOW Low level output
 * @return IO_GPIO_21_CFG_LL_HIGH 
 */
#define io_get_gpio_21_cfg_ll(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mGpio21Cfg, IO_GPIO_X_CFG_LL_FIELD_MASK )
/**
 * @brief reads the IRQ field from the GPIO_21_CFG register 
 * @param dev ptr to opex device
 * @return IO_GPIO_21_CFG_IRQ_NONE No interrupt
 * @return IO_GPIO_21_CFG_IRQ_RISING Trigger on Rising
 * @return IO_GPIO_21_CFG_IRQ_FALLING Trigger on falling
 * @return IO_GPIO_21_CFG_IRQ_ANY Trigger on any
 */
#define io_get_gpio_21_cfg_irq(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mGpio21Cfg, IO_GPIO_X_CFG_IRQ_FIELD_MASK )
/**
 * @brief reads the DIR field from the GPIO_22_CFG register 
 * @param dev ptr to opex device
 * @return IO_GPIO_22_CFG_DIR_IN GPIO is an input
 * @return IO_GPIO_22_CFG_DIR_OUT GPIO is an output
 */
#define io_get_gpio_22_cfg_dir(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mGpio22Cfg, IO_GPIO_X_CFG_DIR_FIELD_MASK )
/**
 * @brief reads the LL field from the GPIO_22_CFG register 
 * @param dev ptr to opex device
 * @return IO_GPIO_22_CFG_LL_LOW Low level output
 * @return IO_GPIO_22_CFG_LL_HIGH 
 */
#define io_get_gpio_22_cfg_ll(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mGpio22Cfg, IO_GPIO_X_CFG_LL_FIELD_MASK )
/**
 * @brief reads the IRQ field from the GPIO_22_CFG register 
 * @param dev ptr to opex device
 * @return IO_GPIO_22_CFG_IRQ_NONE No interrupt
 * @return IO_GPIO_22_CFG_IRQ_RISING Trigger on Rising
 * @return IO_GPIO_22_CFG_IRQ_FALLING Trigger on falling
 * @return IO_GPIO_22_CFG_IRQ_ANY Trigger on any
 */
#define io_get_gpio_22_cfg_irq(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mGpio22Cfg, IO_GPIO_X_CFG_IRQ_FIELD_MASK )
/**
 * @brief reads the DIR field from the GPIO_23_CFG register 
 * @param dev ptr to opex device
 * @return IO_GPIO_23_CFG_DIR_IN GPIO is an input
 * @return IO_GPIO_23_CFG_DIR_OUT GPIO is an output
 */
#define io_get_gpio_23_cfg_dir(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mGpio23Cfg, IO_GPIO_X_CFG_DIR_FIELD_MASK )
/**
 * @brief reads the LL field from the GPIO_23_CFG register 
 * @param dev ptr to opex device
 * @return IO_GPIO_23_CFG_LL_LOW Low level output
 * @return IO_GPIO_23_CFG_LL_HIGH 
 */
#define io_get_gpio_23_cfg_ll(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mGpio23Cfg, IO_GPIO_X_CFG_LL_FIELD_MASK )
/**
 * @brief reads the IRQ field from the GPIO_23_CFG register 
 * @param dev ptr to opex device
 * @return IO_GPIO_23_CFG_IRQ_NONE No interrupt
 * @return IO_GPIO_23_CFG_IRQ_RISING Trigger on Rising
 * @return IO_GPIO_23_CFG_IRQ_FALLING Trigger on falling
 * @return IO_GPIO_23_CFG_IRQ_ANY Trigger on any
 */
#define io_get_gpio_23_cfg_irq(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mGpio23Cfg, IO_GPIO_X_CFG_IRQ_FIELD_MASK )
/**
 * @brief reads the DIR field from the GPIO_24_CFG register 
 * @param dev ptr to opex device
 * @return IO_GPIO_24_CFG_DIR_IN GPIO is an input
 * @return IO_GPIO_24_CFG_DIR_OUT GPIO is an output
 */
#define io_get_gpio_24_cfg_dir(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mGpio24Cfg, IO_GPIO_X_CFG_DIR_FIELD_MASK )
/**
 * @brief reads the LL field from the GPIO_24_CFG register 
 * @param dev ptr to opex device
 * @return IO_GPIO_24_CFG_LL_LOW Low level output
 * @return IO_GPIO_24_CFG_LL_HIGH 
 */
#define io_get_gpio_24_cfg_ll(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mGpio24Cfg, IO_GPIO_X_CFG_LL_FIELD_MASK )
/**
 * @brief reads the IRQ field from the GPIO_24_CFG register 
 * @param dev ptr to opex device
 * @return IO_GPIO_24_CFG_IRQ_NONE No interrupt
 * @return IO_GPIO_24_CFG_IRQ_RISING Trigger on Rising
 * @return IO_GPIO_24_CFG_IRQ_FALLING Trigger on falling
 * @return IO_GPIO_24_CFG_IRQ_ANY Trigger on any
 */
#define io_get_gpio_24_cfg_irq(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mGpio24Cfg, IO_GPIO_X_CFG_IRQ_FIELD_MASK )
/**
 * @brief reads the DIR field from the GPIO_25_CFG register 
 * @param dev ptr to opex device
 * @return IO_GPIO_25_CFG_DIR_IN GPIO is an input
 * @return IO_GPIO_25_CFG_DIR_OUT GPIO is an output
 */
#define io_get_gpio_25_cfg_dir(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mGpio25Cfg, IO_GPIO_X_CFG_DIR_FIELD_MASK )
/**
 * @brief reads the LL field from the GPIO_25_CFG register 
 * @param dev ptr to opex device
 * @return IO_GPIO_25_CFG_LL_LOW Low level output
 * @return IO_GPIO_25_CFG_LL_HIGH 
 */
#define io_get_gpio_25_cfg_ll(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mGpio25Cfg, IO_GPIO_X_CFG_LL_FIELD_MASK )
/**
 * @brief reads the IRQ field from the GPIO_25_CFG register 
 * @param dev ptr to opex device
 * @return IO_GPIO_25_CFG_IRQ_NONE No interrupt
 * @return IO_GPIO_25_CFG_IRQ_RISING Trigger on Rising
 * @return IO_GPIO_25_CFG_IRQ_FALLING Trigger on falling
 * @return IO_GPIO_25_CFG_IRQ_ANY Trigger on any
 */
#define io_get_gpio_25_cfg_irq(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mGpio25Cfg, IO_GPIO_X_CFG_IRQ_FIELD_MASK )
/**
 * @brief reads the Polarity field from the IRQ_CFG register 
 * @param dev ptr to opex device
 * @return IO_IRQ_CFG_POLARITY_ACTIVE_HIGH GPIO is high when IRQ is pending
 * @return IO_IRQ_CFG_POLARITY_ACTIVE_LOW GPIO is low when IRQ is pending
 */
#define io_get_irq_cfg_polarity(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mIrqCfg, IO_IRQ_CFG_POLARITY_FIELD_MASK )
/**
 * @brief reads the Output field from the IRQ_CFG register 
 * @param dev ptr to opex device
 */
#define io_get_irq_cfg_output(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mIrqCfg, IO_IRQ_CFG_OUTPUT_FIELD_MASK )
/**
 * @brief reads the Treshold field from the ADC_0_CFG register 
 * @param dev ptr to opex device
 */
#define io_get_adc_0_cfg_treshold(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mAdc0Cfg, IO_ADC_X_CFG_TRESHOLD_FIELD_MASK )
/**
 * @brief reads the IRQ field from the ADC_0_CFG register 
 * @param dev ptr to opex device
 * @return IO_ADC_0_CFG_IRQ_NONE No interrupt
 * @return IO_ADC_0_CFG_IRQ_RISING Trigger on Rising
 * @return IO_ADC_0_CFG_IRQ_FALLING Trigger on falling
 * @return IO_ADC_0_CFG_IRQ_ANY Trigger on any
 */
#define io_get_adc_0_cfg_irq(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mAdc0Cfg, IO_ADC_X_CFG_IRQ_FIELD_MASK )
/**
 * @brief reads the Treshold field from the ADC_1_CFG register 
 * @param dev ptr to opex device
 */
#define io_get_adc_1_cfg_treshold(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mAdc1Cfg, IO_ADC_X_CFG_TRESHOLD_FIELD_MASK )
/**
 * @brief reads the IRQ field from the ADC_1_CFG register 
 * @param dev ptr to opex device
 * @return IO_ADC_1_CFG_IRQ_NONE No interrupt
 * @return IO_ADC_1_CFG_IRQ_RISING Trigger on Rising
 * @return IO_ADC_1_CFG_IRQ_FALLING Trigger on falling
 * @return IO_ADC_1_CFG_IRQ_ANY Trigger on any
 */
#define io_get_adc_1_cfg_irq(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mAdc1Cfg, IO_ADC_X_CFG_IRQ_FIELD_MASK )
/**
 * @brief reads the Treshold field from the ADC_2_CFG register 
 * @param dev ptr to opex device
 */
#define io_get_adc_2_cfg_treshold(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mAdc2Cfg, IO_ADC_X_CFG_TRESHOLD_FIELD_MASK )
/**
 * @brief reads the IRQ field from the ADC_2_CFG register 
 * @param dev ptr to opex device
 * @return IO_ADC_2_CFG_IRQ_NONE No interrupt
 * @return IO_ADC_2_CFG_IRQ_RISING Trigger on Rising
 * @return IO_ADC_2_CFG_IRQ_FALLING Trigger on falling
 * @return IO_ADC_2_CFG_IRQ_ANY Trigger on any
 */
#define io_get_adc_2_cfg_irq(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mAdc2Cfg, IO_ADC_X_CFG_IRQ_FIELD_MASK )
/**
 * @brief reads the Treshold field from the ADC_3_CFG register 
 * @param dev ptr to opex device
 */
#define io_get_adc_3_cfg_treshold(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mAdc3Cfg, IO_ADC_X_CFG_TRESHOLD_FIELD_MASK )
/**
 * @brief reads the IRQ field from the ADC_3_CFG register 
 * @param dev ptr to opex device
 * @return IO_ADC_3_CFG_IRQ_NONE No interrupt
 * @return IO_ADC_3_CFG_IRQ_RISING Trigger on Rising
 * @return IO_ADC_3_CFG_IRQ_FALLING Trigger on falling
 * @return IO_ADC_3_CFG_IRQ_ANY Trigger on any
 */
#define io_get_adc_3_cfg_irq(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mAdc3Cfg, IO_ADC_X_CFG_IRQ_FIELD_MASK )
/**
 * @brief reads the Treshold field from the ADC_4_CFG register 
 * @param dev ptr to opex device
 */
#define io_get_adc_4_cfg_treshold(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mAdc4Cfg, IO_ADC_X_CFG_TRESHOLD_FIELD_MASK )
/**
 * @brief reads the IRQ field from the ADC_4_CFG register 
 * @param dev ptr to opex device
 * @return IO_ADC_4_CFG_IRQ_NONE No interrupt
 * @return IO_ADC_4_CFG_IRQ_RISING Trigger on Rising
 * @return IO_ADC_4_CFG_IRQ_FALLING Trigger on falling
 * @return IO_ADC_4_CFG_IRQ_ANY Trigger on any
 */
#define io_get_adc_4_cfg_irq(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mAdc4Cfg, IO_ADC_X_CFG_IRQ_FIELD_MASK )
/**
 * @brief reads the Period field from the PWM_CONFIG register 
 * @param dev ptr to opex device
 */
#define io_get_pwm_config_period(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mPwmConfig, IO_PWM_CONFIG_PERIOD_FIELD_MASK )
/**
 * @brief reads the Prescaler field from the PWM_CONFIG register 
 * @param dev ptr to opex device
 * @return IO_PWM_CONFIG_PRESCALER_PRESCALER_1 divide clock by 1 (16Mhz)
 * @return IO_PWM_CONFIG_PRESCALER_PRESCALER_2 divide clock by 2 (8Mhz)
 * @return IO_PWM_CONFIG_PRESCALER_PRESCALER_4 divide clock by 4  (4Mhz)
 * @return IO_PWM_CONFIG_PRESCALER_PRESCALER_8 divide clock by 8  (2Mhz)
 * @return IO_PWM_CONFIG_PRESCALER_PRESCALER_16 divide clock by 16  (1Mhz)
 * @return IO_PWM_CONFIG_PRESCALER_PRESCALER_32 divide clock by 32  (500Khz)
 * @return IO_PWM_CONFIG_PRESCALER_PRESCALER_64 divide clock by 64  (250Khz)
 * @return IO_PWM_CONFIG_PRESCALER_PRESCALER_128 divide clock by 128 (125Khz)
 * @return IO_PWM_CONFIG_PRESCALER_PRESCALER_256 divide clock by 256 (62.5 Khz)
 * @return IO_PWM_CONFIG_PRESCALER_PRESCALER_512 divide clock by 512  (31.25 Khz)
 * @return IO_PWM_CONFIG_PRESCALER_PRESCALER_1024 divide clock by 1024 (1.5625 KHz)
 * @return IO_PWM_CONFIG_PRESCALER_PRESCALER_2048 divide clock by 2048  ()
 * @return IO_PWM_CONFIG_PRESCALER_PRESCALER_4096 divide clock by 4096  ()
 * @return IO_PWM_CONFIG_PRESCALER_PRESCALER_8192 divide clock by 8192  ()
 * @return IO_PWM_CONFIG_PRESCALER_PRESCALER_16384 divide clock by 16384 ()
 * @return IO_PWM_CONFIG_PRESCALER_PRESCALER_32768 divide clock by 32768 ()
 */
#define io_get_pwm_config_prescaler(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mPwmConfig, IO_PWM_CONFIG_PRESCALER_FIELD_MASK )
/**
 * @brief reads the ID field from the WHO_AM_I register 
 * @param dev ptr to opex device
 * @return IO_WHO_AM_I_ID_STM8S003F3 20 pin variant
 * @return IO_WHO_AM_I_ID_STM8S003K3 32 pin variant
 */
#define io_get_who_am_i_id(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mWhoAmI, IO_WHO_AM_I_ID_FIELD_MASK )
/**
 * @brief reads the MAJOR field from the VERSION register 
 * @param dev ptr to opex device
 */
#define io_get_version_major(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mVersion, IO_VERSION_MAJOR_FIELD_MASK )
/**
 * @brief reads the MINOR field from the VERSION register 
 * @param dev ptr to opex device
 */
#define io_get_version_minor(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mVersion, IO_VERSION_MINOR_FIELD_MASK )
/**
 * @brief reads the PATCH field from the VERSION register 
 * @param dev ptr to opex device
 */
#define io_get_version_patch(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mVersion, IO_VERSION_PATCH_FIELD_MASK )
/**
 * @brief reads the BUILD field from the VERSION register 
 * @param dev ptr to opex device
 */
#define io_get_version_build(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mVersion, IO_VERSION_BUILD_FIELD_MASK )


/*******************************************************************************
  Field Setters                                                                              
*******************************************************************************/

/**
 * @brief writes the DIR field to the GPIO_0_CFG register 
 * @param dev ptr to opex device
 * @option IO_GPIO_0_CFG_DIR_IN GPIO is an input
 * @option IO_GPIO_0_CFG_DIR_OUT GPIO is an output
 */
#define io_set_gpio_0_cfg_dir(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mGpio0Cfg, IO_GPIO_X_CFG_DIR_FIELD_MASK , (val) )
/**
 * @brief writes the LL field to the GPIO_0_CFG register 
 * @param dev ptr to opex device
 * @option IO_GPIO_0_CFG_LL_LOW Low level output
 * @option IO_GPIO_0_CFG_LL_HIGH 
 */
#define io_set_gpio_0_cfg_ll(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mGpio0Cfg, IO_GPIO_X_CFG_LL_FIELD_MASK , (val) )
/**
 * @brief writes the IRQ field to the GPIO_0_CFG register 
 * @param dev ptr to opex device
 * @option IO_GPIO_0_CFG_IRQ_NONE No interrupt
 * @option IO_GPIO_0_CFG_IRQ_RISING Trigger on Rising
 * @option IO_GPIO_0_CFG_IRQ_FALLING Trigger on falling
 * @option IO_GPIO_0_CFG_IRQ_ANY Trigger on any
 */
#define io_set_gpio_0_cfg_irq(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mGpio0Cfg, IO_GPIO_X_CFG_IRQ_FIELD_MASK , (val) )
/**
 * @brief writes the DIR field to the GPIO_1_CFG register 
 * @param dev ptr to opex device
 * @option IO_GPIO_1_CFG_DIR_IN GPIO is an input
 * @option IO_GPIO_1_CFG_DIR_OUT GPIO is an output
 */
#define io_set_gpio_1_cfg_dir(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mGpio1Cfg, IO_GPIO_X_CFG_DIR_FIELD_MASK , (val) )
/**
 * @brief writes the LL field to the GPIO_1_CFG register 
 * @param dev ptr to opex device
 * @option IO_GPIO_1_CFG_LL_LOW Low level output
 * @option IO_GPIO_1_CFG_LL_HIGH 
 */
#define io_set_gpio_1_cfg_ll(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mGpio1Cfg, IO_GPIO_X_CFG_LL_FIELD_MASK , (val) )
/**
 * @brief writes the IRQ field to the GPIO_1_CFG register 
 * @param dev ptr to opex device
 * @option IO_GPIO_1_CFG_IRQ_NONE No interrupt
 * @option IO_GPIO_1_CFG_IRQ_RISING Trigger on Rising
 * @option IO_GPIO_1_CFG_IRQ_FALLING Trigger on falling
 * @option IO_GPIO_1_CFG_IRQ_ANY Trigger on any
 */
#define io_set_gpio_1_cfg_irq(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mGpio1Cfg, IO_GPIO_X_CFG_IRQ_FIELD_MASK , (val) )
/**
 * @brief writes the DIR field to the GPIO_2_CFG register 
 * @param dev ptr to opex device
 * @option IO_GPIO_2_CFG_DIR_IN GPIO is an input
 * @option IO_GPIO_2_CFG_DIR_OUT GPIO is an output
 */
#define io_set_gpio_2_cfg_dir(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mGpio2Cfg, IO_GPIO_X_CFG_DIR_FIELD_MASK , (val) )
/**
 * @brief writes the LL field to the GPIO_2_CFG register 
 * @param dev ptr to opex device
 * @option IO_GPIO_2_CFG_LL_LOW Low level output
 * @option IO_GPIO_2_CFG_LL_HIGH 
 */
#define io_set_gpio_2_cfg_ll(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mGpio2Cfg, IO_GPIO_X_CFG_LL_FIELD_MASK , (val) )
/**
 * @brief writes the IRQ field to the GPIO_2_CFG register 
 * @param dev ptr to opex device
 * @option IO_GPIO_2_CFG_IRQ_NONE No interrupt
 * @option IO_GPIO_2_CFG_IRQ_RISING Trigger on Rising
 * @option IO_GPIO_2_CFG_IRQ_FALLING Trigger on falling
 * @option IO_GPIO_2_CFG_IRQ_ANY Trigger on any
 */
#define io_set_gpio_2_cfg_irq(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mGpio2Cfg, IO_GPIO_X_CFG_IRQ_FIELD_MASK , (val) )
/**
 * @brief writes the DIR field to the GPIO_3_CFG register 
 * @param dev ptr to opex device
 * @option IO_GPIO_3_CFG_DIR_IN GPIO is an input
 * @option IO_GPIO_3_CFG_DIR_OUT GPIO is an output
 */
#define io_set_gpio_3_cfg_dir(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mGpio3Cfg, IO_GPIO_X_CFG_DIR_FIELD_MASK , (val) )
/**
 * @brief writes the LL field to the GPIO_3_CFG register 
 * @param dev ptr to opex device
 * @option IO_GPIO_3_CFG_LL_LOW Low level output
 * @option IO_GPIO_3_CFG_LL_HIGH 
 */
#define io_set_gpio_3_cfg_ll(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mGpio3Cfg, IO_GPIO_X_CFG_LL_FIELD_MASK , (val) )
/**
 * @brief writes the IRQ field to the GPIO_3_CFG register 
 * @param dev ptr to opex device
 * @option IO_GPIO_3_CFG_IRQ_NONE No interrupt
 * @option IO_GPIO_3_CFG_IRQ_RISING Trigger on Rising
 * @option IO_GPIO_3_CFG_IRQ_FALLING Trigger on falling
 * @option IO_GPIO_3_CFG_IRQ_ANY Trigger on any
 */
#define io_set_gpio_3_cfg_irq(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mGpio3Cfg, IO_GPIO_X_CFG_IRQ_FIELD_MASK , (val) )
/**
 * @brief writes the DIR field to the GPIO_4_CFG register 
 * @param dev ptr to opex device
 * @option IO_GPIO_4_CFG_DIR_IN GPIO is an input
 * @option IO_GPIO_4_CFG_DIR_OUT GPIO is an output
 */
#define io_set_gpio_4_cfg_dir(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mGpio4Cfg, IO_GPIO_X_CFG_DIR_FIELD_MASK , (val) )
/**
 * @brief writes the LL field to the GPIO_4_CFG register 
 * @param dev ptr to opex device
 * @option IO_GPIO_4_CFG_LL_LOW Low level output
 * @option IO_GPIO_4_CFG_LL_HIGH 
 */
#define io_set_gpio_4_cfg_ll(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mGpio4Cfg, IO_GPIO_X_CFG_LL_FIELD_MASK , (val) )
/**
 * @brief writes the IRQ field to the GPIO_4_CFG register 
 * @param dev ptr to opex device
 * @option IO_GPIO_4_CFG_IRQ_NONE No interrupt
 * @option IO_GPIO_4_CFG_IRQ_RISING Trigger on Rising
 * @option IO_GPIO_4_CFG_IRQ_FALLING Trigger on falling
 * @option IO_GPIO_4_CFG_IRQ_ANY Trigger on any
 */
#define io_set_gpio_4_cfg_irq(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mGpio4Cfg, IO_GPIO_X_CFG_IRQ_FIELD_MASK , (val) )
/**
 * @brief writes the DIR field to the GPIO_5_CFG register 
 * @param dev ptr to opex device
 * @option IO_GPIO_5_CFG_DIR_IN GPIO is an input
 * @option IO_GPIO_5_CFG_DIR_OUT GPIO is an output
 */
#define io_set_gpio_5_cfg_dir(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mGpio5Cfg, IO_GPIO_X_CFG_DIR_FIELD_MASK , (val) )
/**
 * @brief writes the LL field to the GPIO_5_CFG register 
 * @param dev ptr to opex device
 * @option IO_GPIO_5_CFG_LL_LOW Low level output
 * @option IO_GPIO_5_CFG_LL_HIGH 
 */
#define io_set_gpio_5_cfg_ll(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mGpio5Cfg, IO_GPIO_X_CFG_LL_FIELD_MASK , (val) )
/**
 * @brief writes the IRQ field to the GPIO_5_CFG register 
 * @param dev ptr to opex device
 * @option IO_GPIO_5_CFG_IRQ_NONE No interrupt
 * @option IO_GPIO_5_CFG_IRQ_RISING Trigger on Rising
 * @option IO_GPIO_5_CFG_IRQ_FALLING Trigger on falling
 * @option IO_GPIO_5_CFG_IRQ_ANY Trigger on any
 */
#define io_set_gpio_5_cfg_irq(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mGpio5Cfg, IO_GPIO_X_CFG_IRQ_FIELD_MASK , (val) )
/**
 * @brief writes the DIR field to the GPIO_6_CFG register 
 * @param dev ptr to opex device
 * @option IO_GPIO_6_CFG_DIR_IN GPIO is an input
 * @option IO_GPIO_6_CFG_DIR_OUT GPIO is an output
 */
#define io_set_gpio_6_cfg_dir(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mGpio6Cfg, IO_GPIO_X_CFG_DIR_FIELD_MASK , (val) )
/**
 * @brief writes the LL field to the GPIO_6_CFG register 
 * @param dev ptr to opex device
 * @option IO_GPIO_6_CFG_LL_LOW Low level output
 * @option IO_GPIO_6_CFG_LL_HIGH 
 */
#define io_set_gpio_6_cfg_ll(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mGpio6Cfg, IO_GPIO_X_CFG_LL_FIELD_MASK , (val) )
/**
 * @brief writes the IRQ field to the GPIO_6_CFG register 
 * @param dev ptr to opex device
 * @option IO_GPIO_6_CFG_IRQ_NONE No interrupt
 * @option IO_GPIO_6_CFG_IRQ_RISING Trigger on Rising
 * @option IO_GPIO_6_CFG_IRQ_FALLING Trigger on falling
 * @option IO_GPIO_6_CFG_IRQ_ANY Trigger on any
 */
#define io_set_gpio_6_cfg_irq(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mGpio6Cfg, IO_GPIO_X_CFG_IRQ_FIELD_MASK , (val) )
/**
 * @brief writes the DIR field to the GPIO_7_CFG register 
 * @param dev ptr to opex device
 * @option IO_GPIO_7_CFG_DIR_IN GPIO is an input
 * @option IO_GPIO_7_CFG_DIR_OUT GPIO is an output
 */
#define io_set_gpio_7_cfg_dir(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mGpio7Cfg, IO_GPIO_X_CFG_DIR_FIELD_MASK , (val) )
/**
 * @brief writes the LL field to the GPIO_7_CFG register 
 * @param dev ptr to opex device
 * @option IO_GPIO_7_CFG_LL_LOW Low level output
 * @option IO_GPIO_7_CFG_LL_HIGH 
 */
#define io_set_gpio_7_cfg_ll(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mGpio7Cfg, IO_GPIO_X_CFG_LL_FIELD_MASK , (val) )
/**
 * @brief writes the IRQ field to the GPIO_7_CFG register 
 * @param dev ptr to opex device
 * @option IO_GPIO_7_CFG_IRQ_NONE No interrupt
 * @option IO_GPIO_7_CFG_IRQ_RISING Trigger on Rising
 * @option IO_GPIO_7_CFG_IRQ_FALLING Trigger on falling
 * @option IO_GPIO_7_CFG_IRQ_ANY Trigger on any
 */
#define io_set_gpio_7_cfg_irq(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mGpio7Cfg, IO_GPIO_X_CFG_IRQ_FIELD_MASK , (val) )
/**
 * @brief writes the DIR field to the GPIO_8_CFG register 
 * @param dev ptr to opex device
 * @option IO_GPIO_8_CFG_DIR_IN GPIO is an input
 * @option IO_GPIO_8_CFG_DIR_OUT GPIO is an output
 */
#define io_set_gpio_8_cfg_dir(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mGpio8Cfg, IO_GPIO_X_CFG_DIR_FIELD_MASK , (val) )
/**
 * @brief writes the LL field to the GPIO_8_CFG register 
 * @param dev ptr to opex device
 * @option IO_GPIO_8_CFG_LL_LOW Low level output
 * @option IO_GPIO_8_CFG_LL_HIGH 
 */
#define io_set_gpio_8_cfg_ll(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mGpio8Cfg, IO_GPIO_X_CFG_LL_FIELD_MASK , (val) )
/**
 * @brief writes the IRQ field to the GPIO_8_CFG register 
 * @param dev ptr to opex device
 * @option IO_GPIO_8_CFG_IRQ_NONE No interrupt
 * @option IO_GPIO_8_CFG_IRQ_RISING Trigger on Rising
 * @option IO_GPIO_8_CFG_IRQ_FALLING Trigger on falling
 * @option IO_GPIO_8_CFG_IRQ_ANY Trigger on any
 */
#define io_set_gpio_8_cfg_irq(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mGpio8Cfg, IO_GPIO_X_CFG_IRQ_FIELD_MASK , (val) )
/**
 * @brief writes the DIR field to the GPIO_9_CFG register 
 * @param dev ptr to opex device
 * @option IO_GPIO_9_CFG_DIR_IN GPIO is an input
 * @option IO_GPIO_9_CFG_DIR_OUT GPIO is an output
 */
#define io_set_gpio_9_cfg_dir(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mGpio9Cfg, IO_GPIO_X_CFG_DIR_FIELD_MASK , (val) )
/**
 * @brief writes the LL field to the GPIO_9_CFG register 
 * @param dev ptr to opex device
 * @option IO_GPIO_9_CFG_LL_LOW Low level output
 * @option IO_GPIO_9_CFG_LL_HIGH 
 */
#define io_set_gpio_9_cfg_ll(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mGpio9Cfg, IO_GPIO_X_CFG_LL_FIELD_MASK , (val) )
/**
 * @brief writes the IRQ field to the GPIO_9_CFG register 
 * @param dev ptr to opex device
 * @option IO_GPIO_9_CFG_IRQ_NONE No interrupt
 * @option IO_GPIO_9_CFG_IRQ_RISING Trigger on Rising
 * @option IO_GPIO_9_CFG_IRQ_FALLING Trigger on falling
 * @option IO_GPIO_9_CFG_IRQ_ANY Trigger on any
 */
#define io_set_gpio_9_cfg_irq(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mGpio9Cfg, IO_GPIO_X_CFG_IRQ_FIELD_MASK , (val) )
/**
 * @brief writes the DIR field to the GPIO_10_CFG register 
 * @param dev ptr to opex device
 * @option IO_GPIO_10_CFG_DIR_IN GPIO is an input
 * @option IO_GPIO_10_CFG_DIR_OUT GPIO is an output
 */
#define io_set_gpio_10_cfg_dir(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mGpio10Cfg, IO_GPIO_X_CFG_DIR_FIELD_MASK , (val) )
/**
 * @brief writes the LL field to the GPIO_10_CFG register 
 * @param dev ptr to opex device
 * @option IO_GPIO_10_CFG_LL_LOW Low level output
 * @option IO_GPIO_10_CFG_LL_HIGH 
 */
#define io_set_gpio_10_cfg_ll(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mGpio10Cfg, IO_GPIO_X_CFG_LL_FIELD_MASK , (val) )
/**
 * @brief writes the IRQ field to the GPIO_10_CFG register 
 * @param dev ptr to opex device
 * @option IO_GPIO_10_CFG_IRQ_NONE No interrupt
 * @option IO_GPIO_10_CFG_IRQ_RISING Trigger on Rising
 * @option IO_GPIO_10_CFG_IRQ_FALLING Trigger on falling
 * @option IO_GPIO_10_CFG_IRQ_ANY Trigger on any
 */
#define io_set_gpio_10_cfg_irq(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mGpio10Cfg, IO_GPIO_X_CFG_IRQ_FIELD_MASK , (val) )
/**
 * @brief writes the DIR field to the GPIO_11_CFG register 
 * @param dev ptr to opex device
 * @option IO_GPIO_11_CFG_DIR_IN GPIO is an input
 * @option IO_GPIO_11_CFG_DIR_OUT GPIO is an output
 */
#define io_set_gpio_11_cfg_dir(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mGpio11Cfg, IO_GPIO_X_CFG_DIR_FIELD_MASK , (val) )
/**
 * @brief writes the LL field to the GPIO_11_CFG register 
 * @param dev ptr to opex device
 * @option IO_GPIO_11_CFG_LL_LOW Low level output
 * @option IO_GPIO_11_CFG_LL_HIGH 
 */
#define io_set_gpio_11_cfg_ll(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mGpio11Cfg, IO_GPIO_X_CFG_LL_FIELD_MASK , (val) )
/**
 * @brief writes the IRQ field to the GPIO_11_CFG register 
 * @param dev ptr to opex device
 * @option IO_GPIO_11_CFG_IRQ_NONE No interrupt
 * @option IO_GPIO_11_CFG_IRQ_RISING Trigger on Rising
 * @option IO_GPIO_11_CFG_IRQ_FALLING Trigger on falling
 * @option IO_GPIO_11_CFG_IRQ_ANY Trigger on any
 */
#define io_set_gpio_11_cfg_irq(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mGpio11Cfg, IO_GPIO_X_CFG_IRQ_FIELD_MASK , (val) )
/**
 * @brief writes the DIR field to the GPIO_12_CFG register 
 * @param dev ptr to opex device
 * @option IO_GPIO_12_CFG_DIR_IN GPIO is an input
 * @option IO_GPIO_12_CFG_DIR_OUT GPIO is an output
 */
#define io_set_gpio_12_cfg_dir(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mGpio12Cfg, IO_GPIO_X_CFG_DIR_FIELD_MASK , (val) )
/**
 * @brief writes the LL field to the GPIO_12_CFG register 
 * @param dev ptr to opex device
 * @option IO_GPIO_12_CFG_LL_LOW Low level output
 * @option IO_GPIO_12_CFG_LL_HIGH 
 */
#define io_set_gpio_12_cfg_ll(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mGpio12Cfg, IO_GPIO_X_CFG_LL_FIELD_MASK , (val) )
/**
 * @brief writes the IRQ field to the GPIO_12_CFG register 
 * @param dev ptr to opex device
 * @option IO_GPIO_12_CFG_IRQ_NONE No interrupt
 * @option IO_GPIO_12_CFG_IRQ_RISING Trigger on Rising
 * @option IO_GPIO_12_CFG_IRQ_FALLING Trigger on falling
 * @option IO_GPIO_12_CFG_IRQ_ANY Trigger on any
 */
#define io_set_gpio_12_cfg_irq(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mGpio12Cfg, IO_GPIO_X_CFG_IRQ_FIELD_MASK , (val) )
/**
 * @brief writes the DIR field to the GPIO_13_CFG register 
 * @param dev ptr to opex device
 * @option IO_GPIO_13_CFG_DIR_IN GPIO is an input
 * @option IO_GPIO_13_CFG_DIR_OUT GPIO is an output
 */
#define io_set_gpio_13_cfg_dir(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mGpio13Cfg, IO_GPIO_X_CFG_DIR_FIELD_MASK , (val) )
/**
 * @brief writes the LL field to the GPIO_13_CFG register 
 * @param dev ptr to opex device
 * @option IO_GPIO_13_CFG_LL_LOW Low level output
 * @option IO_GPIO_13_CFG_LL_HIGH 
 */
#define io_set_gpio_13_cfg_ll(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mGpio13Cfg, IO_GPIO_X_CFG_LL_FIELD_MASK , (val) )
/**
 * @brief writes the IRQ field to the GPIO_13_CFG register 
 * @param dev ptr to opex device
 * @option IO_GPIO_13_CFG_IRQ_NONE No interrupt
 * @option IO_GPIO_13_CFG_IRQ_RISING Trigger on Rising
 * @option IO_GPIO_13_CFG_IRQ_FALLING Trigger on falling
 * @option IO_GPIO_13_CFG_IRQ_ANY Trigger on any
 */
#define io_set_gpio_13_cfg_irq(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mGpio13Cfg, IO_GPIO_X_CFG_IRQ_FIELD_MASK , (val) )
/**
 * @brief writes the DIR field to the GPIO_14_CFG register 
 * @param dev ptr to opex device
 * @option IO_GPIO_14_CFG_DIR_IN GPIO is an input
 * @option IO_GPIO_14_CFG_DIR_OUT GPIO is an output
 */
#define io_set_gpio_14_cfg_dir(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mGpio14Cfg, IO_GPIO_X_CFG_DIR_FIELD_MASK , (val) )
/**
 * @brief writes the LL field to the GPIO_14_CFG register 
 * @param dev ptr to opex device
 * @option IO_GPIO_14_CFG_LL_LOW Low level output
 * @option IO_GPIO_14_CFG_LL_HIGH 
 */
#define io_set_gpio_14_cfg_ll(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mGpio14Cfg, IO_GPIO_X_CFG_LL_FIELD_MASK , (val) )
/**
 * @brief writes the IRQ field to the GPIO_14_CFG register 
 * @param dev ptr to opex device
 * @option IO_GPIO_14_CFG_IRQ_NONE No interrupt
 * @option IO_GPIO_14_CFG_IRQ_RISING Trigger on Rising
 * @option IO_GPIO_14_CFG_IRQ_FALLING Trigger on falling
 * @option IO_GPIO_14_CFG_IRQ_ANY Trigger on any
 */
#define io_set_gpio_14_cfg_irq(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mGpio14Cfg, IO_GPIO_X_CFG_IRQ_FIELD_MASK , (val) )
/**
 * @brief writes the DIR field to the GPIO_15_CFG register 
 * @param dev ptr to opex device
 * @option IO_GPIO_15_CFG_DIR_IN GPIO is an input
 * @option IO_GPIO_15_CFG_DIR_OUT GPIO is an output
 */
#define io_set_gpio_15_cfg_dir(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mGpio15Cfg, IO_GPIO_X_CFG_DIR_FIELD_MASK , (val) )
/**
 * @brief writes the LL field to the GPIO_15_CFG register 
 * @param dev ptr to opex device
 * @option IO_GPIO_15_CFG_LL_LOW Low level output
 * @option IO_GPIO_15_CFG_LL_HIGH 
 */
#define io_set_gpio_15_cfg_ll(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mGpio15Cfg, IO_GPIO_X_CFG_LL_FIELD_MASK , (val) )
/**
 * @brief writes the IRQ field to the GPIO_15_CFG register 
 * @param dev ptr to opex device
 * @option IO_GPIO_15_CFG_IRQ_NONE No interrupt
 * @option IO_GPIO_15_CFG_IRQ_RISING Trigger on Rising
 * @option IO_GPIO_15_CFG_IRQ_FALLING Trigger on falling
 * @option IO_GPIO_15_CFG_IRQ_ANY Trigger on any
 */
#define io_set_gpio_15_cfg_irq(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mGpio15Cfg, IO_GPIO_X_CFG_IRQ_FIELD_MASK , (val) )
/**
 * @brief writes the DIR field to the GPIO_16_CFG register 
 * @param dev ptr to opex device
 * @option IO_GPIO_16_CFG_DIR_IN GPIO is an input
 * @option IO_GPIO_16_CFG_DIR_OUT GPIO is an output
 */
#define io_set_gpio_16_cfg_dir(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mGpio16Cfg, IO_GPIO_X_CFG_DIR_FIELD_MASK , (val) )
/**
 * @brief writes the LL field to the GPIO_16_CFG register 
 * @param dev ptr to opex device
 * @option IO_GPIO_16_CFG_LL_LOW Low level output
 * @option IO_GPIO_16_CFG_LL_HIGH 
 */
#define io_set_gpio_16_cfg_ll(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mGpio16Cfg, IO_GPIO_X_CFG_LL_FIELD_MASK , (val) )
/**
 * @brief writes the IRQ field to the GPIO_16_CFG register 
 * @param dev ptr to opex device
 * @option IO_GPIO_16_CFG_IRQ_NONE No interrupt
 * @option IO_GPIO_16_CFG_IRQ_RISING Trigger on Rising
 * @option IO_GPIO_16_CFG_IRQ_FALLING Trigger on falling
 * @option IO_GPIO_16_CFG_IRQ_ANY Trigger on any
 */
#define io_set_gpio_16_cfg_irq(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mGpio16Cfg, IO_GPIO_X_CFG_IRQ_FIELD_MASK , (val) )
/**
 * @brief writes the DIR field to the GPIO_17_CFG register 
 * @param dev ptr to opex device
 * @option IO_GPIO_17_CFG_DIR_IN GPIO is an input
 * @option IO_GPIO_17_CFG_DIR_OUT GPIO is an output
 */
#define io_set_gpio_17_cfg_dir(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mGpio17Cfg, IO_GPIO_X_CFG_DIR_FIELD_MASK , (val) )
/**
 * @brief writes the LL field to the GPIO_17_CFG register 
 * @param dev ptr to opex device
 * @option IO_GPIO_17_CFG_LL_LOW Low level output
 * @option IO_GPIO_17_CFG_LL_HIGH 
 */
#define io_set_gpio_17_cfg_ll(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mGpio17Cfg, IO_GPIO_X_CFG_LL_FIELD_MASK , (val) )
/**
 * @brief writes the IRQ field to the GPIO_17_CFG register 
 * @param dev ptr to opex device
 * @option IO_GPIO_17_CFG_IRQ_NONE No interrupt
 * @option IO_GPIO_17_CFG_IRQ_RISING Trigger on Rising
 * @option IO_GPIO_17_CFG_IRQ_FALLING Trigger on falling
 * @option IO_GPIO_17_CFG_IRQ_ANY Trigger on any
 */
#define io_set_gpio_17_cfg_irq(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mGpio17Cfg, IO_GPIO_X_CFG_IRQ_FIELD_MASK , (val) )
/**
 * @brief writes the DIR field to the GPIO_18_CFG register 
 * @param dev ptr to opex device
 * @option IO_GPIO_18_CFG_DIR_IN GPIO is an input
 * @option IO_GPIO_18_CFG_DIR_OUT GPIO is an output
 */
#define io_set_gpio_18_cfg_dir(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mGpio18Cfg, IO_GPIO_X_CFG_DIR_FIELD_MASK , (val) )
/**
 * @brief writes the LL field to the GPIO_18_CFG register 
 * @param dev ptr to opex device
 * @option IO_GPIO_18_CFG_LL_LOW Low level output
 * @option IO_GPIO_18_CFG_LL_HIGH 
 */
#define io_set_gpio_18_cfg_ll(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mGpio18Cfg, IO_GPIO_X_CFG_LL_FIELD_MASK , (val) )
/**
 * @brief writes the IRQ field to the GPIO_18_CFG register 
 * @param dev ptr to opex device
 * @option IO_GPIO_18_CFG_IRQ_NONE No interrupt
 * @option IO_GPIO_18_CFG_IRQ_RISING Trigger on Rising
 * @option IO_GPIO_18_CFG_IRQ_FALLING Trigger on falling
 * @option IO_GPIO_18_CFG_IRQ_ANY Trigger on any
 */
#define io_set_gpio_18_cfg_irq(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mGpio18Cfg, IO_GPIO_X_CFG_IRQ_FIELD_MASK , (val) )
/**
 * @brief writes the DIR field to the GPIO_19_CFG register 
 * @param dev ptr to opex device
 * @option IO_GPIO_19_CFG_DIR_IN GPIO is an input
 * @option IO_GPIO_19_CFG_DIR_OUT GPIO is an output
 */
#define io_set_gpio_19_cfg_dir(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mGpio19Cfg, IO_GPIO_X_CFG_DIR_FIELD_MASK , (val) )
/**
 * @brief writes the LL field to the GPIO_19_CFG register 
 * @param dev ptr to opex device
 * @option IO_GPIO_19_CFG_LL_LOW Low level output
 * @option IO_GPIO_19_CFG_LL_HIGH 
 */
#define io_set_gpio_19_cfg_ll(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mGpio19Cfg, IO_GPIO_X_CFG_LL_FIELD_MASK , (val) )
/**
 * @brief writes the IRQ field to the GPIO_19_CFG register 
 * @param dev ptr to opex device
 * @option IO_GPIO_19_CFG_IRQ_NONE No interrupt
 * @option IO_GPIO_19_CFG_IRQ_RISING Trigger on Rising
 * @option IO_GPIO_19_CFG_IRQ_FALLING Trigger on falling
 * @option IO_GPIO_19_CFG_IRQ_ANY Trigger on any
 */
#define io_set_gpio_19_cfg_irq(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mGpio19Cfg, IO_GPIO_X_CFG_IRQ_FIELD_MASK , (val) )
/**
 * @brief writes the DIR field to the GPIO_20_CFG register 
 * @param dev ptr to opex device
 * @option IO_GPIO_20_CFG_DIR_IN GPIO is an input
 * @option IO_GPIO_20_CFG_DIR_OUT GPIO is an output
 */
#define io_set_gpio_20_cfg_dir(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mGpio20Cfg, IO_GPIO_X_CFG_DIR_FIELD_MASK , (val) )
/**
 * @brief writes the LL field to the GPIO_20_CFG register 
 * @param dev ptr to opex device
 * @option IO_GPIO_20_CFG_LL_LOW Low level output
 * @option IO_GPIO_20_CFG_LL_HIGH 
 */
#define io_set_gpio_20_cfg_ll(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mGpio20Cfg, IO_GPIO_X_CFG_LL_FIELD_MASK , (val) )
/**
 * @brief writes the IRQ field to the GPIO_20_CFG register 
 * @param dev ptr to opex device
 * @option IO_GPIO_20_CFG_IRQ_NONE No interrupt
 * @option IO_GPIO_20_CFG_IRQ_RISING Trigger on Rising
 * @option IO_GPIO_20_CFG_IRQ_FALLING Trigger on falling
 * @option IO_GPIO_20_CFG_IRQ_ANY Trigger on any
 */
#define io_set_gpio_20_cfg_irq(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mGpio20Cfg, IO_GPIO_X_CFG_IRQ_FIELD_MASK , (val) )
/**
 * @brief writes the DIR field to the GPIO_21_CFG register 
 * @param dev ptr to opex device
 * @option IO_GPIO_21_CFG_DIR_IN GPIO is an input
 * @option IO_GPIO_21_CFG_DIR_OUT GPIO is an output
 */
#define io_set_gpio_21_cfg_dir(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mGpio21Cfg, IO_GPIO_X_CFG_DIR_FIELD_MASK , (val) )
/**
 * @brief writes the LL field to the GPIO_21_CFG register 
 * @param dev ptr to opex device
 * @option IO_GPIO_21_CFG_LL_LOW Low level output
 * @option IO_GPIO_21_CFG_LL_HIGH 
 */
#define io_set_gpio_21_cfg_ll(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mGpio21Cfg, IO_GPIO_X_CFG_LL_FIELD_MASK , (val) )
/**
 * @brief writes the IRQ field to the GPIO_21_CFG register 
 * @param dev ptr to opex device
 * @option IO_GPIO_21_CFG_IRQ_NONE No interrupt
 * @option IO_GPIO_21_CFG_IRQ_RISING Trigger on Rising
 * @option IO_GPIO_21_CFG_IRQ_FALLING Trigger on falling
 * @option IO_GPIO_21_CFG_IRQ_ANY Trigger on any
 */
#define io_set_gpio_21_cfg_irq(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mGpio21Cfg, IO_GPIO_X_CFG_IRQ_FIELD_MASK , (val) )
/**
 * @brief writes the DIR field to the GPIO_22_CFG register 
 * @param dev ptr to opex device
 * @option IO_GPIO_22_CFG_DIR_IN GPIO is an input
 * @option IO_GPIO_22_CFG_DIR_OUT GPIO is an output
 */
#define io_set_gpio_22_cfg_dir(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mGpio22Cfg, IO_GPIO_X_CFG_DIR_FIELD_MASK , (val) )
/**
 * @brief writes the LL field to the GPIO_22_CFG register 
 * @param dev ptr to opex device
 * @option IO_GPIO_22_CFG_LL_LOW Low level output
 * @option IO_GPIO_22_CFG_LL_HIGH 
 */
#define io_set_gpio_22_cfg_ll(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mGpio22Cfg, IO_GPIO_X_CFG_LL_FIELD_MASK , (val) )
/**
 * @brief writes the IRQ field to the GPIO_22_CFG register 
 * @param dev ptr to opex device
 * @option IO_GPIO_22_CFG_IRQ_NONE No interrupt
 * @option IO_GPIO_22_CFG_IRQ_RISING Trigger on Rising
 * @option IO_GPIO_22_CFG_IRQ_FALLING Trigger on falling
 * @option IO_GPIO_22_CFG_IRQ_ANY Trigger on any
 */
#define io_set_gpio_22_cfg_irq(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mGpio22Cfg, IO_GPIO_X_CFG_IRQ_FIELD_MASK , (val) )
/**
 * @brief writes the DIR field to the GPIO_23_CFG register 
 * @param dev ptr to opex device
 * @option IO_GPIO_23_CFG_DIR_IN GPIO is an input
 * @option IO_GPIO_23_CFG_DIR_OUT GPIO is an output
 */
#define io_set_gpio_23_cfg_dir(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mGpio23Cfg, IO_GPIO_X_CFG_DIR_FIELD_MASK , (val) )
/**
 * @brief writes the LL field to the GPIO_23_CFG register 
 * @param dev ptr to opex device
 * @option IO_GPIO_23_CFG_LL_LOW Low level output
 * @option IO_GPIO_23_CFG_LL_HIGH 
 */
#define io_set_gpio_23_cfg_ll(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mGpio23Cfg, IO_GPIO_X_CFG_LL_FIELD_MASK , (val) )
/**
 * @brief writes the IRQ field to the GPIO_23_CFG register 
 * @param dev ptr to opex device
 * @option IO_GPIO_23_CFG_IRQ_NONE No interrupt
 * @option IO_GPIO_23_CFG_IRQ_RISING Trigger on Rising
 * @option IO_GPIO_23_CFG_IRQ_FALLING Trigger on falling
 * @option IO_GPIO_23_CFG_IRQ_ANY Trigger on any
 */
#define io_set_gpio_23_cfg_irq(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mGpio23Cfg, IO_GPIO_X_CFG_IRQ_FIELD_MASK , (val) )
/**
 * @brief writes the DIR field to the GPIO_24_CFG register 
 * @param dev ptr to opex device
 * @option IO_GPIO_24_CFG_DIR_IN GPIO is an input
 * @option IO_GPIO_24_CFG_DIR_OUT GPIO is an output
 */
#define io_set_gpio_24_cfg_dir(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mGpio24Cfg, IO_GPIO_X_CFG_DIR_FIELD_MASK , (val) )
/**
 * @brief writes the LL field to the GPIO_24_CFG register 
 * @param dev ptr to opex device
 * @option IO_GPIO_24_CFG_LL_LOW Low level output
 * @option IO_GPIO_24_CFG_LL_HIGH 
 */
#define io_set_gpio_24_cfg_ll(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mGpio24Cfg, IO_GPIO_X_CFG_LL_FIELD_MASK , (val) )
/**
 * @brief writes the IRQ field to the GPIO_24_CFG register 
 * @param dev ptr to opex device
 * @option IO_GPIO_24_CFG_IRQ_NONE No interrupt
 * @option IO_GPIO_24_CFG_IRQ_RISING Trigger on Rising
 * @option IO_GPIO_24_CFG_IRQ_FALLING Trigger on falling
 * @option IO_GPIO_24_CFG_IRQ_ANY Trigger on any
 */
#define io_set_gpio_24_cfg_irq(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mGpio24Cfg, IO_GPIO_X_CFG_IRQ_FIELD_MASK , (val) )
/**
 * @brief writes the DIR field to the GPIO_25_CFG register 
 * @param dev ptr to opex device
 * @option IO_GPIO_25_CFG_DIR_IN GPIO is an input
 * @option IO_GPIO_25_CFG_DIR_OUT GPIO is an output
 */
#define io_set_gpio_25_cfg_dir(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mGpio25Cfg, IO_GPIO_X_CFG_DIR_FIELD_MASK , (val) )
/**
 * @brief writes the LL field to the GPIO_25_CFG register 
 * @param dev ptr to opex device
 * @option IO_GPIO_25_CFG_LL_LOW Low level output
 * @option IO_GPIO_25_CFG_LL_HIGH 
 */
#define io_set_gpio_25_cfg_ll(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mGpio25Cfg, IO_GPIO_X_CFG_LL_FIELD_MASK , (val) )
/**
 * @brief writes the IRQ field to the GPIO_25_CFG register 
 * @param dev ptr to opex device
 * @option IO_GPIO_25_CFG_IRQ_NONE No interrupt
 * @option IO_GPIO_25_CFG_IRQ_RISING Trigger on Rising
 * @option IO_GPIO_25_CFG_IRQ_FALLING Trigger on falling
 * @option IO_GPIO_25_CFG_IRQ_ANY Trigger on any
 */
#define io_set_gpio_25_cfg_irq(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mGpio25Cfg, IO_GPIO_X_CFG_IRQ_FIELD_MASK , (val) )
/**
 * @brief writes the Polarity field to the IRQ_CFG register 
 * @param dev ptr to opex device
 * @option IO_IRQ_CFG_POLARITY_ACTIVE_HIGH GPIO is high when IRQ is pending
 * @option IO_IRQ_CFG_POLARITY_ACTIVE_LOW GPIO is low when IRQ is pending
 */
#define io_set_irq_cfg_polarity(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mIrqCfg, IO_IRQ_CFG_POLARITY_FIELD_MASK , (val) )
/**
 * @brief writes the Output field to the IRQ_CFG register 
 * @param dev ptr to opex device
 */
#define io_set_irq_cfg_output(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mIrqCfg, IO_IRQ_CFG_OUTPUT_FIELD_MASK , (val) )
/**
 * @brief writes the Treshold field to the ADC_0_CFG register 
 * @param dev ptr to opex device
 */
#define io_set_adc_0_cfg_treshold(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mAdc0Cfg, IO_ADC_X_CFG_TRESHOLD_FIELD_MASK , (val) )
/**
 * @brief writes the IRQ field to the ADC_0_CFG register 
 * @param dev ptr to opex device
 * @option IO_ADC_0_CFG_IRQ_NONE No interrupt
 * @option IO_ADC_0_CFG_IRQ_RISING Trigger on Rising
 * @option IO_ADC_0_CFG_IRQ_FALLING Trigger on falling
 * @option IO_ADC_0_CFG_IRQ_ANY Trigger on any
 */
#define io_set_adc_0_cfg_irq(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mAdc0Cfg, IO_ADC_X_CFG_IRQ_FIELD_MASK , (val) )
/**
 * @brief writes the Treshold field to the ADC_1_CFG register 
 * @param dev ptr to opex device
 */
#define io_set_adc_1_cfg_treshold(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mAdc1Cfg, IO_ADC_X_CFG_TRESHOLD_FIELD_MASK , (val) )
/**
 * @brief writes the IRQ field to the ADC_1_CFG register 
 * @param dev ptr to opex device
 * @option IO_ADC_1_CFG_IRQ_NONE No interrupt
 * @option IO_ADC_1_CFG_IRQ_RISING Trigger on Rising
 * @option IO_ADC_1_CFG_IRQ_FALLING Trigger on falling
 * @option IO_ADC_1_CFG_IRQ_ANY Trigger on any
 */
#define io_set_adc_1_cfg_irq(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mAdc1Cfg, IO_ADC_X_CFG_IRQ_FIELD_MASK , (val) )
/**
 * @brief writes the Treshold field to the ADC_2_CFG register 
 * @param dev ptr to opex device
 */
#define io_set_adc_2_cfg_treshold(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mAdc2Cfg, IO_ADC_X_CFG_TRESHOLD_FIELD_MASK , (val) )
/**
 * @brief writes the IRQ field to the ADC_2_CFG register 
 * @param dev ptr to opex device
 * @option IO_ADC_2_CFG_IRQ_NONE No interrupt
 * @option IO_ADC_2_CFG_IRQ_RISING Trigger on Rising
 * @option IO_ADC_2_CFG_IRQ_FALLING Trigger on falling
 * @option IO_ADC_2_CFG_IRQ_ANY Trigger on any
 */
#define io_set_adc_2_cfg_irq(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mAdc2Cfg, IO_ADC_X_CFG_IRQ_FIELD_MASK , (val) )
/**
 * @brief writes the Treshold field to the ADC_3_CFG register 
 * @param dev ptr to opex device
 */
#define io_set_adc_3_cfg_treshold(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mAdc3Cfg, IO_ADC_X_CFG_TRESHOLD_FIELD_MASK , (val) )
/**
 * @brief writes the IRQ field to the ADC_3_CFG register 
 * @param dev ptr to opex device
 * @option IO_ADC_3_CFG_IRQ_NONE No interrupt
 * @option IO_ADC_3_CFG_IRQ_RISING Trigger on Rising
 * @option IO_ADC_3_CFG_IRQ_FALLING Trigger on falling
 * @option IO_ADC_3_CFG_IRQ_ANY Trigger on any
 */
#define io_set_adc_3_cfg_irq(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mAdc3Cfg, IO_ADC_X_CFG_IRQ_FIELD_MASK , (val) )
/**
 * @brief writes the Treshold field to the ADC_4_CFG register 
 * @param dev ptr to opex device
 */
#define io_set_adc_4_cfg_treshold(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mAdc4Cfg, IO_ADC_X_CFG_TRESHOLD_FIELD_MASK , (val) )
/**
 * @brief writes the IRQ field to the ADC_4_CFG register 
 * @param dev ptr to opex device
 * @option IO_ADC_4_CFG_IRQ_NONE No interrupt
 * @option IO_ADC_4_CFG_IRQ_RISING Trigger on Rising
 * @option IO_ADC_4_CFG_IRQ_FALLING Trigger on falling
 * @option IO_ADC_4_CFG_IRQ_ANY Trigger on any
 */
#define io_set_adc_4_cfg_irq(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mAdc4Cfg, IO_ADC_X_CFG_IRQ_FIELD_MASK , (val) )
/**
 * @brief writes the Period field to the PWM_CONFIG register 
 * @param dev ptr to opex device
 */
#define io_set_pwm_config_period(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mPwmConfig, IO_PWM_CONFIG_PERIOD_FIELD_MASK , (val) )
/**
 * @brief writes the Prescaler field to the PWM_CONFIG register 
 * @param dev ptr to opex device
 * @option IO_PWM_CONFIG_PRESCALER_PRESCALER_1 divide clock by 1 (16Mhz)
 * @option IO_PWM_CONFIG_PRESCALER_PRESCALER_2 divide clock by 2 (8Mhz)
 * @option IO_PWM_CONFIG_PRESCALER_PRESCALER_4 divide clock by 4  (4Mhz)
 * @option IO_PWM_CONFIG_PRESCALER_PRESCALER_8 divide clock by 8  (2Mhz)
 * @option IO_PWM_CONFIG_PRESCALER_PRESCALER_16 divide clock by 16  (1Mhz)
 * @option IO_PWM_CONFIG_PRESCALER_PRESCALER_32 divide clock by 32  (500Khz)
 * @option IO_PWM_CONFIG_PRESCALER_PRESCALER_64 divide clock by 64  (250Khz)
 * @option IO_PWM_CONFIG_PRESCALER_PRESCALER_128 divide clock by 128 (125Khz)
 * @option IO_PWM_CONFIG_PRESCALER_PRESCALER_256 divide clock by 256 (62.5 Khz)
 * @option IO_PWM_CONFIG_PRESCALER_PRESCALER_512 divide clock by 512  (31.25 Khz)
 * @option IO_PWM_CONFIG_PRESCALER_PRESCALER_1024 divide clock by 1024 (1.5625 KHz)
 * @option IO_PWM_CONFIG_PRESCALER_PRESCALER_2048 divide clock by 2048  ()
 * @option IO_PWM_CONFIG_PRESCALER_PRESCALER_4096 divide clock by 4096  ()
 * @option IO_PWM_CONFIG_PRESCALER_PRESCALER_8192 divide clock by 8192  ()
 * @option IO_PWM_CONFIG_PRESCALER_PRESCALER_16384 divide clock by 16384 ()
 * @option IO_PWM_CONFIG_PRESCALER_PRESCALER_32768 divide clock by 32768 ()
 */
#define io_set_pwm_config_prescaler(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mPwmConfig, IO_PWM_CONFIG_PRESCALER_FIELD_MASK , (val) )
/**
 * @brief writes the ID field to the WHO_AM_I register 
 * @param dev ptr to opex device
 * @option IO_WHO_AM_I_ID_STM8S003F3 20 pin variant
 * @option IO_WHO_AM_I_ID_STM8S003K3 32 pin variant
 */
#define io_set_who_am_i_id(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mWhoAmI, IO_WHO_AM_I_ID_FIELD_MASK , (val) )
/**
 * @brief writes the MAJOR field to the VERSION register 
 * @param dev ptr to opex device
 */
#define io_set_version_major(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mVersion, IO_VERSION_MAJOR_FIELD_MASK , (val) )
/**
 * @brief writes the MINOR field to the VERSION register 
 * @param dev ptr to opex device
 */
#define io_set_version_minor(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mVersion, IO_VERSION_MINOR_FIELD_MASK , (val) )
/**
 * @brief writes the PATCH field to the VERSION register 
 * @param dev ptr to opex device
 */
#define io_set_version_patch(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mVersion, IO_VERSION_PATCH_FIELD_MASK , (val) )
/**
 * @brief writes the BUILD field to the VERSION register 
 * @param dev ptr to opex device
 */
#define io_set_version_build(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mVersion, IO_VERSION_BUILD_FIELD_MASK , (val) )

/*******************************************************************************
  Configs                                                                            
*******************************************************************************/


