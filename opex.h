/**
  * @file opex.h
  * @author generated by mrt-device utility 
  * @link [https://github.com/uprev-mrt/mrtutils/wiki/mrt-device]
  * @brief Device driver for opex device
  *
  *
  */

#ifdef __cplusplus
extern "C"
{
#endif

#include <stdint.h>
#include <stdbool.h>
#include "Devices/RegDevice/register_device.h"
#include "opex_regs.h"

/*user-block-top-start*/

typedef struct{
  union{
    struct mFields{
      uint8_t mDIR : 1;
      uint8_t mPP : 1;
      uint8_t mLL : 1;
      uint8_t mIRQ : 2;
      uint8_t mALT : 1; 
      uint8_t mEN:  1;
    };
    uint8_t mReg;
  }
} io_gpio_cfg_t;
/*user-block-top-end*/


/*******************************************************************************
  Sruct                                                                                
*******************************************************************************/

typedef struct{
    mrt_regdev_t mRegDev;            //ptr to base register-device 
    mrt_reg_t mGpioIn;               //Input values for gpio 0-25
    mrt_reg_t mGpioOut;              //Output values for gpio 0-15
    mrt_reg_t mGpioDdr;              //Direction Register for GPIO
    mrt_reg_t mIrqSrc;               //latching Interrupt source mask. indicates souce of IRQ resets on read
    mrt_reg_t mAdc0Val;              //Output of ADC 0
    mrt_reg_t mAdc1Val;              //Output of ADC 1
    mrt_reg_t mAdc2Val;              //Output of ADC 2
    mrt_reg_t mAdc3Val;              //Output of ADC 3
    mrt_reg_t mAdc4Val;              //Output of ADC 4
    mrt_reg_t mPwm0Val;              //PWM value for ch 0
    mrt_reg_t mPwm1Val;              //PWM value for ch 1
    mrt_reg_t mPwm2Val;              //PWM value for ch 2
    mrt_reg_t mPwm3Val;              //PWM value for ch 3
    mrt_reg_t mPwm4Val;              //PWM value for ch 4
    mrt_reg_t mPwm5Val;              //PWM value for ch 5
    mrt_reg_t mGpio0Cfg;             //Configuration for GPIO 0
    mrt_reg_t mGpio1Cfg;             //Configuration for GPIO 1
    mrt_reg_t mGpio2Cfg;             //Configuration for GPIO 2
    mrt_reg_t mGpio3Cfg;             //Configuration for GPIO 3
    mrt_reg_t mGpio4Cfg;             //Configuration for GPIO 4
    mrt_reg_t mGpio5Cfg;             //Configuration for GPIO 5
    mrt_reg_t mGpio6Cfg;             //Configuration for GPIO 6
    mrt_reg_t mGpio7Cfg;             //Configuration for GPIO 7
    mrt_reg_t mGpio8Cfg;             //Configuration for GPIO 8
    mrt_reg_t mGpio9Cfg;             //Configuration for GPIO 9
    mrt_reg_t mGpio10Cfg;            //Configuration for GPIO 10
    mrt_reg_t mGpio11Cfg;            //Configuration for GPIO 11
    mrt_reg_t mGpio12Cfg;            //Configuration for GPIO 12
    mrt_reg_t mGpio13Cfg;            //Configuration for GPIO 13
    mrt_reg_t mGpio14Cfg;            //Configuration for GPIO 14
    mrt_reg_t mGpio15Cfg;            //Configuration for GPIO 15
    mrt_reg_t mGpio16Cfg;            //Configuration for GPIO 16
    mrt_reg_t mGpio17Cfg;            //Configuration for GPIO 17
    mrt_reg_t mGpio18Cfg;            //Configuration for GPIO 18
    mrt_reg_t mGpio19Cfg;            //Configuration for GPIO 19
    mrt_reg_t mGpio20Cfg;            //Configuration for GPIO 20
    mrt_reg_t mGpio21Cfg;            //Configuration for GPIO 21
    mrt_reg_t mGpio22Cfg;            //Configuration for GPIO 22
    mrt_reg_t mGpio23Cfg;            //Configuration for GPIO 23
    mrt_reg_t mGpio24Cfg;            //Configuration for GPIO 24
    mrt_reg_t mGpio25Cfg;            //Configuration for GPIO 25
    mrt_reg_t mIrqCfg;               //IRQ Configuration
    mrt_reg_t mAdc0Cfg;              //Configuration for ADC 0
    mrt_reg_t mAdc1Cfg;              //Configuration for ADC 1
    mrt_reg_t mAdc2Cfg;              //Configuration for ADC 2
    mrt_reg_t mAdc3Cfg;              //Configuration for ADC 3
    mrt_reg_t mAdc4Cfg;              //Configuration for ADC 4
    mrt_reg_t mPwmConfig;            //Configuration for PWM
    mrt_reg_t mWhoAmI;               //Device ID
    mrt_reg_t mVersion;              //Version of firmware
    mrt_reg_t mEepromMem;            //Start address of EEPROM memory on stm8. User can read/write up to 128 bytes starting at this address
/*user-block-struct-start*/
/*user-block-struct-end*/
}opex_t;

/**
 * @brief initializes opex device for i2c bus
 * @param dev ptr to opex device
 * @param i2c handle for i2c bus
 */
mrt_status_t io_init_i2c(opex_t* dev, mrt_i2c_handle_t i2c);
/**
 * @brief initializes opex device for i2c bus
 * @param dev ptr to opex device
 * @param spi handle for i2c bus
 */
mrt_status_t io_init_spi(opex_t* dev, mrt_spi_handle_t spi, mrt_gpio_t chipSelect );

/**
  *@brief tests interface with device
  *@param dev ptr to opex device
  *@return MRT_STATUS_OK if test is passed 
  *@return MRT_STATUS_ERROR if test fails
  */
mrt_status_t io_test(opex_t* dev);

/**
  *@brief writes register of device
  *@param dev ptr to opex device
  *@param reg ptr to register definition
  *@param data data to be write
  *@return status (type defined by platform)
  */
#define io_write_reg(dev, reg, data) regdev_write_reg(&(dev)->mRegDev, (reg), (data))

/**
  *@brief reads register of device
  *@param dev ptr to opex device
  *@param reg ptr to register definition
  *@param data ptr to store data
  *@return value of register
  */
#define io_read_reg(dev, reg) regdev_read_reg(&(dev)->mRegDev, (reg))


/*user-block-bottom-start*/

mrt_status_t io_cfg_gpio(opex_t* dev, uint8_t gpio, io_gpio_cfg_t cfg); 
mrt_status_t io_cfg_gpio_in(opex_t* dev, uint8_t gpio); 

/*user-block-bottom-end*/

#ifdef __cplusplus
}
#endif